<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Abizer Nasir]]></title>
  <link href="http://abizern.org/atom.xml" rel="self"/>
  <link href="http://abizern.org/"/>
  <updated>2013-05-30T11:01:30+01:00</updated>
  <id>http://abizern.org/</id>
  <author>
    <name><![CDATA[Abizer Nasir]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git at London Web Standards]]></title>
    <link href="http://abizern.org/2013/05/30/git-at-london-web-standards/"/>
    <updated>2013-05-30T10:30:00+01:00</updated>
    <id>http://abizern.org/2013/05/30/git-at-london-web-standards</id>
    <content type="html"><![CDATA[<p>London Web Standards is focusing on Git for their meeting on
<a href="http://londonwebstandards.org/2013/05/lws-june-2013-gitdiet/">17th June</a>. I&#8217;m
going to be talking on the topic of &#8220;Git&#8217;s not what you think it is&#8221;.</p>

<!-- more -->


<p>The Abstract:</p>

<blockquote><p>You think you know Git? Really?</p><p>Are you using Git the same tired old way, checking in your changes and pulling<br/>from your colleagues? Do you get the sneaking feeling that others are having<br/>much more fun with it than you are?</p><p>Are you a refusenik, not tempted to use version control because its not for you?</p><p>Iâ€™m going to challenge some common ideas about Git; I hope to get current users<br/>to be more expansive in their use of it, and maybe to bring some new users into<br/>the fold.</p></blockquote>


<p>I&#8217;ve been talking about <a href="https://alpha.app.net/abizern">Git</a> since 2009, which
is when I became comfortable using it. I&#8217;ve heard some reasons for people not
using it, or using it in its simplest form. My aim in this talk is to turn those
statements on their head; maybe to get people to think about using git, not just
as a set of task based recipes (which is a perfectly good way of working), but
also to use the parts of it that seem too difficult, or poorly explained.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up for Lisp on OS X]]></title>
    <link href="http://abizern.org/2013/03/31/setting-up-for-lisp-on-os-x/"/>
    <updated>2013-03-31T23:20:00+01:00</updated>
    <id>http://abizern.org/2013/03/31/setting-up-for-lisp-on-os-x</id>
    <content type="html"><![CDATA[<p>This is how I roll, you might choose a different path.</p>

<!-- more -->


<ol>
<li><p>Install Emacs. Get a nice, modern pre-built binary from
<a href="http://emacsformacosx.com/">Emacs For Mac OS X</a>. It even supports fullscreen
mode</p></li>
<li><p>Install <a href="http://batsov.com/prelude/">Emacs Prelude</a> which provides a useful,
opinionated emacs environment which is easily configured.</p></li>
<li><p>Install clisp. I use homebrew so <code>brew install clisp</code> takes care of that for
me.</p></li>
<li><p>Install <a href="http://quicklisp.org">quicklisp</a>; from Terminal go to a temporary
directory and download quicklisp.lisp with <code>curl -O
http://beta.quicklisp.org/quicklisp.lisp</code>. Then run the lisp file from clisp
with <code>clisp-i quicklisp.lisp</code>. As the instructions say, evaluate
<code>(quicklisp-quickstart:install)</code>, and then evaluate <code>(ql:add-to-init-file)</code>
to load quicklisp along with lisp.</p></li>
<li><p>Install Slime. While you have the clisp repl open, evaluate <code>(ql:quickload
"quicklisp-slime-helper")</code>. After this runs, you will see some
recommendations for what to put into your .emacs file. You don&#8217;t need to do
this. I did say that Prelude was opinionated, and it&#8217;s done this for
you. However, it&#8217;s not set up for clisp, so instead, add this to your
<code>personal/personal.el</code> file: <code>(setq slime-default-lisp 'clisp)</code></p></li>
<li><p>And that should be it. You don&#8217;t need to have the clisp repl running in the
terminal anymore, and you can delete the <code>quicklisp.lisp</code> file that you
downladed, as it&#8217;s done it&#8217;s job of installation now.</p></li>
<li><p>Test the setup from Emacs by running <code>M-x slime-mode</code> and you&#8217;ll be taken to
the lisp REPL.</p></li>
</ol>


<p>Now that&#8217;s done you can go on to the hard part of actually learning and using lisp.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Missing Xcode Toolbar]]></title>
    <link href="http://abizern.org/2013/01/29/missing-xcode-toolbar/"/>
    <updated>2013-01-29T11:23:00+00:00</updated>
    <id>http://abizern.org/2013/01/29/missing-xcode-toolbar</id>
    <content type="html"><![CDATA[<p>I&#8217;m sure you&#8217;ve been there.</p>

<p>You&#8217;re working in Xcode, and you have a file opened on another monitor in
another window. Unfortunately, you forget about it, and when you close your
project and reopen it again, the toolbar is missing.</p>

<!-- more -->


<p><img class="top" src="http://images.abizern.org/2013/01/Missing%20Xcode%20Toolbar.png" width="579" height="45" title="Missing Toolbar" ></p>

<p>It can be frustrating, because Xcode remembers this, and every time you open the
project it will open without a toolbar. You can put it back by right-clicking in
what is left of the toolbar and choosing one of the options.</p>

<p><img class="top" src="http://images.abizern.org/2013/01/Xcode%20Toolbar%20Menu.png" width="534" height="112" title="Toolbar Menu" ></p>

<p>But the gotcha that has bit me twice now, and prompted me to write this to
remind myself of it, is that you need to choose the &#8220;Show Toolbar&#8221; menu item
rather than one of the other two preferences. I was incorrectly choosing my
preference of &#8220;Icon Only&#8221; and wondering why my preference wasn&#8217;t sticking.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Correcting Brace Layout]]></title>
    <link href="http://abizern.org/2012/12/30/correcting-brace-layout/"/>
    <updated>2012-12-30T11:09:00+00:00</updated>
    <id>http://abizern.org/2012/12/30/correcting-brace-layout</id>
    <content type="html"><![CDATA[<p>I wrote a <a href="http://abizern.org/fixbraces/">small rubygem</a> called <em>fixbraces</em> to
move the opening brace of a conditional to the same line as the opening
statement.</p>

<p>So now I can correct all the Xcode generated stubs that look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">someMethod</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// some code here</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Into my preferred format:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">someMethod</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// some code here</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which fits with my personal coding standards.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Commanding Your Text Editor]]></title>
    <link href="http://abizern.org/2012/11/02/commanding-your-text-editor/"/>
    <updated>2012-11-02T19:53:00+00:00</updated>
    <id>http://abizern.org/2012/11/02/commanding-your-text-editor</id>
    <content type="html"><![CDATA[<p>There&#8217;s a recent post up on the PeepCode Blog about
<a href="https://peepcode.com/blog/2012/commanding-your-text-editor">Commanding Your Text Editor</a>
which has some handy tips for Emacs, Vim, Textmate, Sublime Text and the OS
X. It&#8217;s a short read, and worth the time.</p>

<!-- more -->


<p>More and more of our time is spent at a keyboard typing, whether you&#8217;re a
programmer or not. Those of you who know me will have heard me talking about the
Dvorak keyboard layout and my current attraction to Emacs.</p>

<p>You don&#8217;t have to go that far down the rabbit hole, but it&#8217;s surprising how many
Emacs bindings are supported natively on the Mac, and unlike Vim; you don&#8217;t need
to be in a different mode to use them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Reason To Learn Lisp]]></title>
    <link href="http://abizern.org/2012/11/01/a-reason-to-learn-lisp/"/>
    <updated>2012-11-01T18:49:00+00:00</updated>
    <id>http://abizern.org/2012/11/01/a-reason-to-learn-lisp</id>
    <content type="html"><![CDATA[<p>A short video from a live demo of Emacs from Web Rebels in Oslo 2012.</p>

<p>As the description says: &#8220;Crappy sound. Swearing. A noisy bar&#8221;, but an example
of strong content overcoming presentation difficulties.</p>

<!-- more -->




<iframe width="640" height="510" src="http://www.youtube.com/embed/p3Te_a-AGqM " frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An improved Reverse Words Script]]></title>
    <link href="http://abizern.org/2012/10/31/an-improved-reverse-words-script/"/>
    <updated>2012-10-31T09:19:00+00:00</updated>
    <id>http://abizern.org/2012/10/31/an-improved-reverse-words-script</id>
    <content type="html"><![CDATA[<p>About 6 months ago I posted
<a href="http://abizern.org/2012/04/09/reverse-words-with-haskell/">a solution</a> to the
Google Code Jam problem
<a href="http://code.google.com/codejam/contest/351101/dashboard#s=p1" title="Original problem statement">Reverse Words</a></p>

<p>I&#8217;ve become more comfortable with Haskell since then, so here&#8217;s an improved solution.</p>

<!-- more -->




<figure class='code'><figcaption><span>Improved reverse words with haskell</span><a href='https://gist.github.com/Abizern/3986006'>View gist</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">Main</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="cm">{-</span>
</span><span class='line'><span class="cm">Problem statement:</span>
</span><span class='line'><span class="cm">http://code.google.com/codejam/contest/351101/dashboard#s=p1</span>
</span><span class='line'>
</span><span class='line'><span class="cm">Run as a script with runghc, or compile with ghc --make -O2</span>
</span><span class='line'>
</span><span class='line'><span class="cm">input and output is by redirection;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">$ ./reverse_words &lt; input_file &gt; output_file</span>
</span><span class='line'><span class="cm"> -}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nn">Control.Monad</span>
</span><span class='line'>
</span><span class='line'><span class="nf">main</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="nb">()</span>
</span><span class='line'><span class="nf">main</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="n">n</span> <span class="ow">&lt;-</span> <span class="n">readLn</span>
</span><span class='line'>  <span class="n">forM_</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">n</span><span class="p">]</span> <span class="o">$</span> <span class="nf">\</span><span class="n">i</span> <span class="ow">-&gt;</span> <span class="kr">do</span>
</span><span class='line'>    <span class="n">solution</span> <span class="ow">&lt;-</span> <span class="n">fmap</span> <span class="p">(</span><span class="n">unwords</span> <span class="o">.</span> <span class="n">reverse</span> <span class="o">.</span> <span class="n">words</span><span class="p">)</span> <span class="n">getLine</span>
</span><span class='line'>    <span class="n">putStrLn</span> <span class="o">$</span> <span class="s">&quot;Case #&quot;</span> <span class="o">++</span> <span class="n">show</span> <span class="n">i</span> <span class="o">++</span> <span class="s">&quot;: &quot;</span> <span class="o">++</span> <span class="n">solution</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;m not one who believes that shorter, terser code is necessarily better, but
that isn&#8217;t what makes this version an improvement. Nor even the use of Monads;
Haskell&#8217;s sexy buzzword. I think this code is better because it has less noise
than the original solution.</p>

<p>Code Jam problems have well defined inputs and required outputs, and there is no
need to load the whole input file when the script starts. Normally, I would be
all for splitting out code into smaller, descriptively named functions, but in
this small case that&#8217;s just more typing and more lines getting in the way of the
actual solution. I think that this version is more readable because there are
less lines of code that don&#8217;t contribute directly to the solution.</p>

<p>And Code Jam has a time limit, so smaller code is faster to write and easier to
debug.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UUID Strings with Cocoa]]></title>
    <link href="http://abizern.org/2012/10/25/uuid-strings-with-cocoa/"/>
    <updated>2012-10-25T11:52:00+01:00</updated>
    <id>http://abizern.org/2012/10/25/uuid-strings-with-cocoa</id>
    <content type="html"><![CDATA[<p>This used to be a thing until the iOS 6 and OS X 10.8 compatible
<a href="http://developer.apple.com/library/mac/#documentation/Foundation/Reference/NSUUID_Class/Reference/Reference.html">NSUUID Class</a>
became available.</p>

<!-- more -->


<h2>New</h2>

<p>This is how you can do it now:</p>

<figure class='code'><figcaption><span>UUID from NSUUID  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">uuidString</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSUUID</span> <span class="n">UUID</span><span class="p">]</span> <span class="n">UUIDString</span><span class="p">];</span>
</span><span class='line'><span class="c1">// Generates: 7E60066C-C7F3-438A-95B1-DDE8634E1072</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Old</h2>

<p>Here&#8217;s a method you can put in a class, with the correct ARC casts on ownership, that
returns a UUID. It&#8217;s a fairly common technique, and you&#8217;ll even see versions of
it where people have created a category on NSString for this.</p>

<figure class='code'><figcaption><span>UUID from a method   </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">uuidString</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Returns a UUID</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CFUUIDRef</span> <span class="n">uuid</span> <span class="o">=</span> <span class="n">CFUUIDCreate</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">uuidStr</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge_transfer</span> <span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">CFUUIDCreateString</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span> <span class="n">uuid</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CFRelease</span><span class="p">(</span><span class="n">uuid</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">uuidStr</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And to use it:</p>

<figure class='code'><figcaption><span>UUID from a method usage  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">uuidString</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">uuidString</span><span class="p">];</span>
</span><span class='line'><span class="c1">// Generates D5CB0560-206F-4581-AA25-1D6A873F3526</span>
</span></code></pre></td></tr></table></div></figure>


<h2>NSProcessInfo</h2>

<p>A common use for unique strings is to name files and directories
within a program so that they do not clash. Since iOS 2 and OS X 10.0 there has
been the <code>globallyUniqueString</code> method in
<a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSProcessInfo_Class/Reference/Reference.html">NSProcessInfo</a>
which returns a string that is unique for the network and process. So, for a
<em>good enough</em> unique string this is probably a better method to use:</p>

<figure class='code'><figcaption><span>Unique String from NSProcessInfo  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">uuidStr</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSProcessInfo</span> <span class="n">processInfo</span><span class="p">]</span> <span class="n">globallyUniqueString</span><span class="p">];</span>
</span><span class='line'><span class="c1">// generates 56341C6E-35A7-4C97-9C5E-7AC79673EAB2-539-000001F95B327819</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Live Coding]]></title>
    <link href="http://abizern.org/2012/08/20/on-live-coding/"/>
    <updated>2012-08-20T12:34:00+01:00</updated>
    <id>http://abizern.org/2012/08/20/on-live-coding</id>
    <content type="html"><![CDATA[<p>I read somewhere that part of the popularity of
<a href="http://en.wikipedia.org/wiki/The_West_Wing">The West Wing</a> was that it was
entertaining to watch smart people solve difficult problems. I think that&#8217;s part
of the reason why I find watching live coding videos so entertaining - It&#8217;s more
fun to watch someone solve a problem than doing it yourself.</p>

<!-- more -->


<p>There are plenty of screencasts you can find - <a href="http://youtubecom">YouTube</a> is
an obvious one, but don&#8217;t forget <a href="http://vimeo.com">Vimeo</a>.</p>

<p>Some good ones to watch are the
<a href="https://peepcode.com/screencasts/play-by-play">Play-By-Play</a> series produced by
<a href="http://peepcode.com">Peepcode</a> These screencasts have a developer solving a
problem set by the host as he talks to them about the choices they make and the
tools they use. Mostly Ruby / Railsy, but there are exceptions - Zed Shaw and
Python, Ryan Singer designing a UX workflow for the Web, Kyle Neath on UI
Workflow, and the latest has Tim Caswell creating a node.js web app.</p>

<p>These are not only interesting screencasts, with plenty to learn from, but I
find they are great for background noise. I work at home, and having the sounds
of a keyboard clacking and techy conversation pushes back the silence. Also,
when you look at a tutorial type blog post - or something on GitHub, all you see
is the finished product. But when you watch someone working, you realise that it
doesn&#8217;t come out fully formed like that, it sort of evolves. The same way that
you evolve code.</p>

<p>I did my own small one about
<a href="http://abizern.org/2012/04/09/reverse-words-with-haskell/">reversing words in Haskell</a>
a few months ago and I found that it&#8217;s harder to do than it looks. I credited
<a href="http://codinguncut.com/">Jonas Tullus</a> as an influence for that screencast and now
see that he has started <a href="http://codinguncut.com">Coding Uncut</a>, where he takes
on a problem and screencasts his solution in Haskell. This is harder to do than
the Peepcode ones, because without anyone asking you questions you become more
self-conscious about vocalising your thoughts.</p>

<p>Some of the things I&#8217;ve picked up from watching these are:</p>

<ul>
<li>It&#8217;s okay to spend your time looking up the documentation. Knowing roughly
what approach to take to a solution and then looking up the details is more
important.</li>
<li>It&#8217;s faster to try something and see what happens rather than overthinking
everything from the beginning.</li>
<li>Version control is not an optional extra (okay, I already believe this, but
it&#8217;s nice to see that I&#8217;m not the only one).</li>
<li>It&#8217;s not the tool that matters - Emacs, Vim, JEdit, Paper and Sharpie - but
how you use it.</li>
<li>&#8220;It&#8217;s not about the code. It&#8217;s your understanding of the problem that you&#8217;re
working on.&#8221; - Zed Shaw</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coding Conventions]]></title>
    <link href="http://abizern.org/2012/07/01/coding-conventions/"/>
    <updated>2012-07-01T11:32:00+01:00</updated>
    <id>http://abizern.org/2012/07/01/coding-conventions</id>
    <content type="html"><![CDATA[<p>I&#8217;ve just published my
<a href="http://abizern.org/cocoa-coding-conventions">Cocoa Coding Conventions</a>.</p>

<!-- more -->


<p>Not so that it can be followed, but to provide an idea of what can be done so
that others can write their own, just as I&#8217;ve based mine on published
conventions.</p>

<p>The idea isn&#8217;t to create a rod for your back when writing code, but to put some
thought into the choices that are made when writing code so that it is consistent.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Stack June 2012]]></title>
    <link href="http://abizern.org/2012/06/05/book-stack-june-2012/"/>
    <updated>2012-06-05T12:57:00+01:00</updated>
    <id>http://abizern.org/2012/06/05/book-stack-june-2012</id>
    <content type="html"><![CDATA[<p>I seem to have accrued a stack of fiction that I haven&#8217;t got around to
reading. This is just a stick in the ground so I remember to dig them up and
read them at some time:</p>

<!-- more -->


<ul>
<li><strong>Anathem</strong> by Neal Stephenson</li>
<li><strong>Reamde</strong> by Neal Stephenson</li>
<li><strong>Embassytown</strong> by China Mieville</li>
<li><strong>Kraken</strong> by China Mieville</li>
<li><strong>Zoo City</strong> by Lauren Beukes</li>
<li><strong>The Namesake</strong> by Jhumpa Lahiri</li>
<li><strong>Vellum</strong> by Hal Duncan</li>
<li><strong>Zero History</strong> by William Gibson</li>
</ul>


<p>I&#8217;m sure there are a couple more that I&#8217;ve missed out, but these are the ones
that I&#8217;m aware of.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[London CoderDojo]]></title>
    <link href="http://abizern.org/2012/04/15/london-coderdojo/"/>
    <updated>2012-04-15T18:30:00+01:00</updated>
    <id>http://abizern.org/2012/04/15/london-coderdojo</id>
    <content type="html"><![CDATA[<p>I mentored at <a href="http://zen.coderdojo.com/dojo/74">CoderDojo London</a> this
weekend. These are just some of my thoughts about it.</p>

<!-- more -->




<blockquote><p>CoderDojo is a movement orientated around running free not-for-profit coding clubs and regular sessions for young people.</p><footer><strong>Coder Dojo site</strong> <cite><a href='http://coderdojo.com/about-us/'>coderdojo.com/about-us/&hellip;</a></cite></footer></blockquote>


<p>A regular London chapter has formed, supported by and at the offices of
<a href="http://forwardtechnology.co.uk">Forward Technology</a>.  It takes place in their
canteen/theatre which has a nice tiered seating area and a miked up
presentation stand.</p>

<p>It&#8217;s still the Easter break, but 6 kids turned up with laptops ready to carry on
with projects they had already started and learn new stuff.  It started with a
presentation of what the day&#8217;s agenda was, which I mostly zoned out of as I was
busy churning through the Javascript tutorial on
<a href="http://codecademy.co.uk">Codecademy</a> which was going to covered. I&#8217;m not a web
developer so I didn&#8217;t want to show myself up.</p>

<p>After the opening talk the kids started burning through the tutorials at a
breakneck pace.  Where I went through them a bit slower; they hammered through
the interactive tutorial without (seemingly) worrying about learning what they
were doing. But that wasn&#8217;t the case.  Each succeeding question depended on
knowledge gained in the previous one, and they obviously had retained it. The
mentors watched them going through the exercises and answered questions.  I may
not know Javascript, but I can spot syntax errors and misspelled commands like a
BOSS.  So I wasn&#8217;t useless as I was worried I would be.</p>

<p>After that section (and after a few breaks - these are kids after all) Adam got
everyone to open
<a href="http://elucidatedbinary.com/recanvas">elucidatedbinary.com/recanvas</a> where you
can draw straight into web page and see the results right as you code. And then
step by step got them to follow along first creating a line, then a rectangle
then filling in the rectangle then drawing circles, arcs and trying to draw the
first initial of your name.</p>

<p>This was the most fun of the afternoon. Seeing the results instantaneously
really drove them along. They changed the points to see what would happen
without worrying about what they were doing. The mentors were kept busy helping
them with the syntax, explaing the difference between starting a line and
drawing a line, the coordinate system, points, colours, line thickness. These
were youngsters who don&#8217;t know their way about a keyboard as most of the rest of
us do, but I didn&#8217;t want to correct them because it would break the flow of what
they were doing. I had to draw the letter shapes on paper a couple of times and
walk them through the process of working out what the coordinates of each point
should be.</p>

<p>I showed one girl how to draw an arc on the canvas, went away and when I came
back she proudly showed me that she&#8217;d put two filled circles above the
arc to make a smiley face. Without being told to or shown how.</p>

<p><span class='pullquote-right' data-pullquote='Helping kids program is hard. You can&#8217;t tell them to RTFM'>
One of the extra tasks was to modify a function to draw on the canvas when the
mouse was pressed. I saw one boy go to Stack Overflow, find a similar solution,
and then, rather than just copy-pasting the code, he turned to me and asked me
to explain <code>mousedown</code> to him. (A lesson that many people could stand to learn).
I tweeted about it later:
Helping kids program is hard. You can&#8217;t tell them to RTFM.
Since I would have to refer to the said FM to answer him properly,
I deferred the question to someone who knew what he was talking about.
</span></p>

<p>It was an energising experience. The program is in the early days yet, there
isn&#8217;t a program of tasks to cover. But the enthusiasm of the children and the
mentors is the driving force at the moment.</p>

<p>If you have or know of someone who would be interested in this. Either as a
mentor or a student, please, let them know about it. The sessions are free to
attend, take place in Camden Town on Saturdays between 12-3. You can sign up
with EventBrite, which gives an idea of how many attendees there will be and how
many mentors are available.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rotate A String with Haskell]]></title>
    <link href="http://abizern.org/2012/04/15/rotate-a-string-with-haskell/"/>
    <updated>2012-04-15T15:08:00+01:00</updated>
    <id>http://abizern.org/2012/04/15/rotate-a-string-with-haskell</id>
    <content type="html"><![CDATA[<p>I qualified for <a href="http://code.google.com/codejam">Google Code Jam</a> this year
answering 3 out of 4 questions. I have no illusions about progressing very far,
but I&#8217;m using it as an excuse to learn some Haskell and to write code faster.</p>

<p>As part of the learning process, I took one of my correct solutions over to the
nice folks at the #haskell channel over on freenode and asked if there was a
better way to do it. I learned something surprising.</p>

<!-- more -->


<p>As part of the solution to the
<a href="http://code.google.com/codejam/contest/1460488/dashboard#s=p2">Recycled Numbers</a>
problem required turning a number such as 1234 into a list of numbers with the
digits rotated [4123, 3412, 2341]. User TSC2 in the channel gave me this simple
way of doing it:</p>

<figure class='code'><figcaption><span>ghci console</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ghci&gt; <span class="o">(</span><span class="se">\x</span>s -&gt; <span class="nb">let </span><span class="nv">n</span> <span class="o">=</span> length xs in <span class="o">(</span>tail . take n . map <span class="o">(</span>take n<span class="o">)</span> . tails . cycle<span class="o">)</span> xs<span class="o">)</span> <span class="s2">&quot;abcde&quot;</span>
</span><span class='line'><span class="o">[</span><span class="s2">&quot;bcdea&quot;</span>,<span class="s2">&quot;cdeab&quot;</span>,<span class="s2">&quot;deabc&quot;</span>,<span class="s2">&quot;eabcd&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;m still new to this so I had to work it out on paper, but here is a step by
step explanation of what is happening: working from right to left as the
functions are evaluated:</p>

<figure class='code'><figcaption><span>xs </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"abcde"</span></code></pre></td></tr></table></div></figure>


<p><code>xs</code> is just the input string.</p>

<figure class='code'><figcaption><span>cycle </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"abcdeabcde..."</span></code></pre></td></tr></table></div></figure>


<p><code>cycle</code> creates an infinite list out of the input list by repeating it. Haskell
is lazy. It doesn&#8217;t actually create the list until it actually needs it, so I&#8217;ve
added the ellpises just to show the concept that this is repeated infinitely.</p>

<figure class='code'><figcaption><span>tails </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>["abcdeabcde...", "bcdeabcdea...", "cdeabcdeab...", "deabcdeabc...", ...]</span></code></pre></td></tr></table></div></figure>


<p>This is where things start to get interesting. <code>tails</code> creates a list out of
successive tails of a list. If you were to do this on a finite list you&#8217;d get a
list of smaller and smaller elements. For example:</p>

<figure class='code'><figcaption><span>ghci console</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ghci&gt; tails <span class="s2">&quot;abcde&quot;</span>
</span><span class='line'><span class="o">[</span><span class="s2">&quot;abcde&quot;</span>,<span class="s2">&quot;bcde&quot;</span>,<span class="s2">&quot;cde&quot;</span>,<span class="s2">&quot;de&quot;</span>,<span class="s2">&quot;e&quot;</span>,<span class="s2">&quot;&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>But since our input is an infinite we now have an infinite list of infinite
lists, each element starting at one letter in from the original list. Remember,
this hasn&#8217;t actually been worked out yet.</p>

<figure class='code'><figcaption><span>map (take n) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>["abcde", "bcdea", "cdeab", "deabc", "eabcd" "abcde", ...]</span></code></pre></td></tr></table></div></figure>


<p><code>take n</code> takes the first <code>n</code> elemets of a list. Our lambda expression defines
this as the length of the list, which is 5. And <code>map</code> applies this to each
element of the list. So now we have an infinite list of 5 element lists. which is
closer to our required final output.</p>

<figure class='code'><figcaption><span>take n </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>["abcde", "bcdea", "cdeab", "deabc", "eabcd"]</span></code></pre></td></tr></table></div></figure>


<p>Applying <code>take n</code> again to the infinite list takes the first 5 elements of the
finite list</p>

<figure class='code'><figcaption><span>tail </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>["bcdea", "cdeab", "deabc", "eabcd"]</span></code></pre></td></tr></table></div></figure>


<p>Applying <code>tail</code> to the finite list takes all but the first element, and we get
the output that we were looking for. Even though along the way we had an
infinite list of infinite lists.</p>

<p>And yet all Haskell did was provide a promise (a <em>thunk</em> in functional terms)
that it would provide the answer when it was asked for, and as the function
progressed the infinite list of infinite list became an infinite list of finite
lists and then a finite list. And still it didn&#8217;t actually resolve all those
calls until it was actually needed. In this case, when the <em>ghci</em> interpreter
tried to get a string to display on the screen.</p>

<p>Freaky or what?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reverse Words With Haskell]]></title>
    <link href="http://abizern.org/2012/04/09/reverse-words-with-haskell/"/>
    <updated>2012-04-09T15:41:00+01:00</updated>
    <id>http://abizern.org/2012/04/09/reverse-words-with-haskell</id>
    <content type="html"><![CDATA[<p>As part of my preparation for <a href="http://code.google.com/codejam">Google Code Jam</a>
I&#8217;ve been working through the practice problems with Haskell.</p>

<p>I made a screencast on solving the
<a href="http://code.google.com/codejam/contest/351101/dashboard#s=p1">Reverse Words</a>
problem, along with the mechanics of getting the problem inputs and submitting solutions. The style was heavily influenced by a sequence on
<a href="http://youtu.be/045422s6xik?hd=1">Data Driven Programming in Haskell</a> by
<a href="http://entirelysubjective.com/programming/data-driven-programming-haskell-1/">Jonas Tullus</a></p>

<!-- more -->


<p>I moved at a slower pace, and talking and typing seem to have confused my brain
so I think I lapsed into gibberish in a couple of places. (If you know me,
you&#8217;ll know that&#8217;s nothing new).</p>

<iframe width="640" height="510" src="http://www.youtube.com/embed/_tgv3HVgOMc  " frameborder="0" allowfullscreen></iframe>


<p>Here&#8217;s the cleaned up source file.</p>

<figure class='code'><figcaption><span>Reverse words with haskell</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">module</span> <span class="nn">Main</span> <span class="kr">where</span>
</span><span class='line'>
</span><span class='line'><span class="cm">{-</span>
</span><span class='line'><span class="cm"> - Problem Statement:</span>
</span><span class='line'><span class="cm"> - http://code.google.com/codejam/contest/351101/dashboard#s=p1</span>
</span><span class='line'><span class="cm"> -</span>
</span><span class='line'><span class="cm"> - Usage either compile or use runhaskell / runghc</span>
</span><span class='line'><span class="cm"> - Pass the input file as the sole command line argument</span>
</span><span class='line'><span class="cm"> - Redirect output if you want the results to go in a file</span>
</span><span class='line'><span class="cm"> -}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nn">IO</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">System.Environment</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.List</span>
</span><span class='line'>
</span><span class='line'><span class="nf">reverseWords</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">String</span>
</span><span class='line'><span class="nf">reverseWords</span> <span class="ow">=</span> <span class="n">unwords</span> <span class="o">.</span> <span class="n">reverse</span> <span class="o">.</span> <span class="n">words</span>
</span><span class='line'>
</span><span class='line'><span class="nf">boilerPlate</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span>
</span><span class='line'><span class="nf">boilerPlate</span> <span class="ow">=</span> <span class="p">[</span><span class="s">&quot;Case #&quot;</span> <span class="o">++</span> <span class="n">show</span> <span class="n">n</span> <span class="o">++</span> <span class="s">&quot;: &quot;</span> <span class="o">|</span> <span class="n">n</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="p">]]</span>
</span><span class='line'>
</span><span class='line'><span class="nf">standardOutput</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span>
</span><span class='line'><span class="nf">standardOutput</span> <span class="ow">=</span> <span class="n">zipWith</span> <span class="p">(</span><span class="o">++</span><span class="p">)</span> <span class="n">boilerPlate</span>
</span><span class='line'>
</span><span class='line'><span class="nf">main</span> <span class="ow">=</span>  <span class="kr">do</span>
</span><span class='line'>  <span class="p">(</span><span class="n">f</span><span class="kt">:</span><span class="kr">_</span><span class="p">)</span> <span class="ow">&lt;-</span> <span class="n">getArgs</span>
</span><span class='line'>  <span class="n">file</span>  <span class="ow">&lt;-</span> <span class="n">readFile</span> <span class="n">f</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">let</span> <span class="n">cases</span>     <span class="ow">=</span> <span class="n">tail</span> <span class="o">$</span> <span class="n">lines</span> <span class="n">file</span>
</span><span class='line'>      <span class="n">solutions</span> <span class="ow">=</span> <span class="n">standardOutput</span> <span class="o">$</span> <span class="n">map</span> <span class="n">reverseWords</span> <span class="n">cases</span>
</span><span class='line'>  <span class="n">putStrLn</span> <span class="o">$</span> <span class="n">unlines</span> <span class="o">$</span> <span class="n">solutions</span>
</span></code></pre></td></tr></table></div></figure>


<p>I need to learn more Emacs shortcuts :(</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Ignore file]]></title>
    <link href="http://abizern.org/2012/03/19/git-ignore-file/"/>
    <updated>2012-03-19T23:27:00+00:00</updated>
    <id>http://abizern.org/2012/03/19/git-ignore-file</id>
    <content type="html"><![CDATA[<p>A while ago I answered a couple of questions on Stack Overflow using my
<code>.gitignore</code> file as an example. I find it strangely satisfying to find that
there are projects on GitHub that use it, and even the odd blogs has put it up
as well.</p>

<p>I might as well have it on my own site:</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Mac OS X
</span><span class='line'>*.DS_Store
</span><span class='line'>
</span><span class='line'># Xcode
</span><span class='line'>*.pbxuser
</span><span class='line'>*.mode1v3
</span><span class='line'>*.mode2v3
</span><span class='line'>*.perspectivev3
</span><span class='line'>*.xcuserstate
</span><span class='line'>project.xcworkspace/
</span><span class='line'>xcuserdata/
</span><span class='line'>
</span><span class='line'># Generated files
</span><span class='line'>*.o
</span><span class='line'>*.pyc
</span><span class='line'>*.hi
</span><span class='line'>
</span><span class='line'>#Python modules
</span><span class='line'>MANIFEST
</span><span class='line'>dist/
</span><span class='line'>build/
</span><span class='line'>
</span><span class='line'># Backup files
</span><span class='line'>*~.nib
</span><span class='line'>\#*#
</span><span class='line'>.#*</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s particularly suited for Xcode. It excludes the workspace settings, which
also includes the breakpoints, so don&#8217;t be surprised if they don&#8217;t carry over in
clones. It also excludes the build schemes unless you mark them as shared.</p>

<p>I&#8217;ve got this as a global ignore file for my system - and if I&#8217;m going to push a
repository elsewhere I just copy it into the repo&#8217;s directory.</p>

<p>It&#8217;s simple to do. If you&#8217;re not familiar with ignore files I&#8217;ve written about
the
<a href="http://365git.tumblr.com/post/519016351/three-ways-of-excluding-files">Three ways of excluding files with Git</a>
elsewhere.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Localisation Testing]]></title>
    <link href="http://abizern.org/2012/03/18/simple-localisation-testing/"/>
    <updated>2012-03-18T08:44:00+00:00</updated>
    <id>http://abizern.org/2012/03/18/simple-localisation-testing</id>
    <content type="html"><![CDATA[<p>Sometimes you want to test your localisations but you don&#8217;t want to go through the hassle of
changing the settings on the simulator, or device, or your Mac for each one. There&#8217;s always the fear
of setting some language that you don&#8217;t understand.</p>

<p>But, with Xcode4 schemes and a little argument passing this is a lot easier than it used to be. You
can set up a scheme for each localisation which will let you run your iOS or Mac app under that
localisation without having to change any settings.</p>

<!-- more -->


<p>Just to make it easier, you can have a look at an example Xcode Workspace that I&#8217;ve
<a href="https://github.com/Abizern/SimpleLocalisationTesting" title="Simple Localisation
Testing">put up on Github</a>. This has two projects within it, one for the Mac and one for the iPhone.</p>

<p><img src="http://images.abizern.org/2012/03/Schemes.png" width="631" height="111" title="Xcode Schemes" ></p>

<p>Start by having a look at the schemes. There are two projects with two schemes each, one for each
localisation. Handily named so you can tell which is for which.</p>

<p><img class="top" src="http://images.abizern.org/2012/03/RunAction_en.png" width="525" height="135" title="en run action" ></p>

<p><img class="top" src="http://images.abizern.org/2012/03/RunAction_es.png" width="525" height="133" title="en run action" ></p>

<p>If you have a a look at the run action for these schemes you can see the arguments that I am
passing. First the <code>-AppleLanguages</code> argument and then the two character country code (with the
brackets back-slash escaped).</p>

<p>That&#8217;s all there is to it. Now you just have to pick the scheme to run and it will load up that
localisation without you having to change it on the simulator. It even works for running debug
builds on the device.</p>

<p>Of course, you should test it properly eventually, but while you are developing, it&#8217;s a quick way to
get feedback about how your localisations appear.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octopress]]></title>
    <link href="http://abizern.org/2012/03/17/hello-octopress/"/>
    <updated>2012-03-17T18:02:00+00:00</updated>
    <id>http://abizern.org/2012/03/17/hello-octopress</id>
    <content type="html"><![CDATA[<p>This is the obligatory post announcing that I&#8217;ve moved this site off Wordpress
to <a href="http://Octopress.org" title="Octopress - The blogging framework for
hackers">Octopress</a>. It&#8217;s been almost a year since I posted anything. And most of what I
did publish was about <a href="http://nscodernightlondon.com" title="NSCoder
Night London's page">NSCoder Night</a>.</p>

<p>The old site had the Solarized Dark theme - and once I saw that the code
formatting on Octopress was that by default I decided to make the move. Now I
can happily write Markdown formatted posts with Emacs and see an almost live
preview of how it will look when published. I get to keep it on
<a href="http://github.com" title="GitHub">GitHub</a> and have it in a repository.</p>

<p>I&#8217;ve tried to set the general colours to Solarized Light. Seems okay so far but
still plenty of room for tweaking.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSCoder Night London Now Has It's Own Page]]></title>
    <link href="http://abizern.org/2011/04/14/nscoder-night-london-now-has-its-own-page/"/>
    <updated>2011-04-14T20:01:01+01:00</updated>
    <id>http://abizern.org/2011/04/14/nscoder-night-london-now-has-its-own-page</id>
    <content type="html"><![CDATA[<p>It&#8217;s been over a year that I&#8217;ve been running the NSCoder Night meetings in
London from here, but I&#8217;ve now moved it to a site of its own. You can now get
all the information from
<a href="http://nscodernightlondon.com">NSCoderNightLondon.com</a>.</p>

<p>Blog style entries never really worked. I hope that having everything together
in just a few pages on a site makes it easier for people who want to turn up.</p>

<p>I hope that it floats up higher in Google Rankings as well. This will also make
it easier for people who want to turn up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just Enough GPG for git]]></title>
    <link href="http://abizern.org/2011/01/17/just-enough-gpg-for-git/"/>
    <updated>2011-01-17T15:52:38+00:00</updated>
    <id>http://abizern.org/2011/01/17/just-enough-gpg-for-git</id>
    <content type="html"><![CDATA[<p>It came about that I wanted to do some work with git and signed tags. It&#8217;s been
a while since I had looked at this, I&#8217;ve got some old entries up on keyservers
that date back to 1999, and never on a Mac.</p>

<p>It turns out that it is quite simple to set up a minimal
<a href="http://en.wikipedia.org/wiki/Pretty_Good_Privacy">GPG</a> environment â€“ one that
lets you work on the command line without having to set it up for Mail.app. This
is about all I need it for.</p>

<!-- more  -->


<p>The <a href="http://www.gpgtools.org/index.html">GPGTools project</a> has recently
resurrected the <a href="http://macgpg.sourceforge.net/">MacGPG project</a> to provide
email encryption and tools to the Mac. It is still in development, and I didn&#8217;t
want to mess about with my Mail installation so rather than install the complete
set of tools, I chose to install <a href="http://www.gpgtools.org/macgpg2.html">MacGPG2</a>
and <a href="http://www.gpgtools.org/keychain.html">GPGKeychain Access</a></p>

<p><a href="http://www.gpgtools.org/macgpg2.html">MacGPG2</a> is the
<a href="http://en.wikipedia.org/wiki/Pretty_Good_Privacy#OpenPGP">OpenPGP</a>
implementation for the Mac. This installs gpg2 into /usr/local/bin and gpg is
symlinked to gpg2. I only mention this because although the commands can all be
issued as gpg, you get to the documentation by using man gpg2, not man
gpg. Installation is through an installer package.</p>

<p><a href="http://www.gpgtools.org/keychain.html">GPGKeychain Access</a> does not integrate
with the Mac Keychain as the name might suggest, but provides a window to look
at and manage the keys that you have on your system. These are usually under
~/.gnupg/ Run the installer, and create your keys. It&#8217;s quite simple and there
is a video on the project page. However, there are a couple of things that you
should keep in mind. If you forget your passphrase you can&#8217;t use your private
key anymore. And if you&#8217;ve published the key, you won&#8217;t be able to revoke it and
it will just sit around on keyservers. So, set an expiry date on your keys in
case you do lose the private key or passphrase. As the expiry date comes up just
extend it again.</p>

<p>There is no key-server configured. There seems to be a ticket for this to be
implemented in some future milestone. Until then, create a file called gpg.conf
under ~/.gnupg and put this line in it:</p>

<pre><code>keyserver hkp://pgp.mit.edu
</code></pre>

<p>And that is just enough so that when you use the menu items that send and get
keys from keyservers they will work. As far as I know, these servers talk to
each other, so writing to one makes the key visible on the others.</p>

<p>Synchronisation of keys is an issue. If you are adventurous you could add more
entries to the gpg.conf file to use a central location for the keyrings,
somewhere like Dropbox or iDisk, so that all your machines can use the same
files. But, it&#8217;s just as easy to export the keys as text and use those files to
keep different machines in sync. Partcularly if you will be using gpg rarely.</p>

<p>This has been a companion piece to the non-Mac centric
<a href="http://365git.tumblr.com/">365Git</a> post about
<a href="http://365git.tumblr.com/post/2796779828/signing-a-git-tag">signed tags</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Staying Flash-free on a MacBook Air]]></title>
    <link href="http://abizern.org/2010/11/21/staying-flash-free-on-a-macbook-air/"/>
    <updated>2010-11-21T17:46:57+00:00</updated>
    <id>http://abizern.org/2010/11/21/staying-flash-free-on-a-macbook-air</id>
    <content type="html"><![CDATA[<p>You may have seen John Gruber&#8217;s posts on
<a href="http://daringfireball.net/2010/11/flash_free_and_cheating_with_google_chrome">uninstalling system-wide flash</a>
and
<a href="http://daringfireball.net/2010/11/masquerading_as_mobile_safari">changing the Safari User Agent</a>
to view some sites that have Flash content.</p>

<p>The new MacBook Airs don&#8217;t have Flash installed by default so this is a
<a href="http://en.wikipedia.org/wiki/Wikipedia:Too_long;_didn%27t_read">tl:dr</a> summary
of those two articles so you don&#8217;t have to download and install the system-wide
Flash player.</p>

<p>Many sites, such as <a href="http://youtube.com">YouTube</a>, provide content in an
alternative format for devices that do not have Flash installed. Get access to
this from Safari by turning on the &#8216;Develop&#8217; menu (Preferences | Advanced) and
change the User Agent to &#8216;Mobile Safari 3.2.2 iPad&#8217;. This works per tab|window
so doesn&#8217;t change the display in what you already have open.</p>

<p>If this still doesn&#8217;t work (I&#8217;m looking at you
<a href="http://www.bbc.co.uk/iplayer/">iPlayer</a>) then you can use Google&#8217;s Chrome
browser, which comes with its own Flash plug-in.</p>
]]></content>
  </entry>
  
</feed>
