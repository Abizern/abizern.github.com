<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-GB"><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="http://abizern.org/atom.xml" rel="self" type="application/atom+xml" /><link href="http://abizern.org/" rel="alternate" type="text/html" hreflang="en-GB" /><updated>2020-08-26T10:58:38+01:00</updated><id>http://abizern.org/atom.xml</id><title type="html">Abizern.org</title><subtitle>Developer and personal blog of an iOS and Mac Contract developer in London.  I write modern maintainable code in Swift. You can sometimes find me running around South East London. But otherwise, I'm just this guy with opinions, you know?</subtitle><entry><title type="html">Zip a Collection of Publishers</title><link href="http://abizern.org/2019/09/29/zip-a-collection-of-publishers.html" rel="alternate" type="text/html" title="Zip a Collection of Publishers" /><published>2019-09-29T15:29:00+01:00</published><updated>2019-09-29T15:29:00+01:00</updated><id>http://abizern.org/2019/09/29/zip-a-collection-of-publishers</id><content type="html" xml:base="http://abizern.org/2019/09/29/zip-a-collection-of-publishers.html">&lt;p&gt;I have an array of publishers: &lt;code class=&quot;highlighter-rouge&quot;&gt;[Publisher&amp;lt;Data, Error&amp;gt;]&lt;/code&gt; and want a publisher of the array of their outputs: &lt;code class=&quot;highlighter-rouge&quot;&gt;Publisher&amp;lt;[Data], Error&amp;gt;&lt;/code&gt;. The Combine framework provides the &lt;code class=&quot;highlighter-rouge&quot;&gt;Zip&lt;/code&gt; family of publishers which only go up to 4 inputs so this won’t suit my needs. I’m going to write about the steps I took to create a publisher that does what I want.&lt;/p&gt;

&lt;p&gt;This seems like a daunting task. There is a blog post about creating a &lt;a href=&quot;https://danieltull.co.uk/blog/2019/08/04/combine-latest-collection/&quot;&gt;Combine Latest publisher&lt;/a&gt; which does something similar to what I needed. I could have used that publisher, but I wanted to be more explicit that this was a &lt;code class=&quot;highlighter-rouge&quot;&gt;Zip&lt;/code&gt; type of publisher not a &lt;code class=&quot;highlighter-rouge&quot;&gt;CombineLatest&lt;/code&gt; type of publisher.&lt;/p&gt;

&lt;p&gt;At a recent &lt;a href=&quot;NSCoderNightLondon.com&quot;&gt;NSCoder Night&lt;/a&gt; &lt;a href=&quot;https://twitter.com/danielctull&quot;&gt;Daniel&lt;/a&gt; helped me write a publisher that fetched all the pages of a paginated URL. From talking to him and referring to his write up I came to realise that creating a publisher is basically like following a recipe. And more importantly it’s not the Publisher that does the work: when a publisher receives a subscription, it creates an internal &lt;code class=&quot;highlighter-rouge&quot;&gt;Subscription&lt;/code&gt; object which it returns to the subscriber. It is this Subscription object which actually does the work.&lt;/p&gt;

&lt;h3 id=&quot;why-do-i-need-my-own-publisher&quot;&gt;Why do I need my own publisher?&lt;/h3&gt;

&lt;p&gt;For an app that I am developing for a client I fetch 24 images from 24 different URLs. I need all the images, and I need them to be ordered for the resulting object that I create to be considered complete. I want to be able to write a chain a like this:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;// [String]&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convertToURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// [URL]&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loadURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// [Publisher&amp;lt;Data, Error&amp;gt;]&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;// Publisher&amp;lt;[Data], Error&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sink&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// Consume [Data] or handle the error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;why-zip-and-not-combinelatest&quot;&gt;Why Zip and not CombineLatest?&lt;/h3&gt;

&lt;p&gt;As the array of publishers that I have are one-shot publishers, I &lt;em&gt;could&lt;/em&gt; use the CombineLatest publisher described in the post above. There is a difference between CombineLatest and Zip. A diagram will help to make this clearer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images.abizern.org/2019/09/CombineLatest.png&quot; alt=&quot;CombineLatest&quot; /&gt;&lt;/p&gt;

&lt;p&gt;CombineLatest publishes the &lt;em&gt;latest&lt;/em&gt; outputs of the publishers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images.abizern.org/2019/09/Zip.png&quot; alt=&quot;Zip&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Zip publishes pairs of outputs.&lt;/p&gt;

&lt;p&gt;I chose to write the Zip publisher because conceptually, I want to wait for all the matched outputs and using a Zip makes this requirement explicit. And, I wanted an excuse to write a publisher.&lt;/p&gt;

&lt;h3 id=&quot;step-1-create-a-struct-which-defines-its-output-and-failure-matched-to-the-upstream-output-and-failure&quot;&gt;Step 1: Create a struct which defines it’s Output and Failure matched to the upstream Output and Failure&lt;/h3&gt;

&lt;p&gt;Let’s start with the Publisher itself. Publishers are &lt;code class=&quot;highlighter-rouge&quot;&gt;Struct&lt;/code&gt;s. In my case it’s just a container to hold the array of publishers so I constrain the generic type to be a &lt;code class=&quot;highlighter-rouge&quot;&gt;Collection&lt;/code&gt; of publishers. I also typealias the Output to be an &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; of the upstream publisher’s Outputs and the Failure to be the upstream publishers Failure type.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ZipCollection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Publishers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Publishers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Publishers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Publisher&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Publishers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Failure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Publishers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Failure&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;publishers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Publishers&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;publishers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Publishers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publishers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publishers&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;step-2-make-this-struct-conform-to-publisher-matching-the-output-and-failure-to-the-downstream-input-and-failure&quot;&gt;Step 2: Make this struct conform to &lt;code class=&quot;highlighter-rouge&quot;&gt;Publisher&lt;/code&gt; matching the Output and Failure to the downstream Input and Failure&lt;/h3&gt;

&lt;p&gt;Add an extension to make &lt;code class=&quot;highlighter-rouge&quot;&gt;Zip&lt;/code&gt; conform to &lt;code class=&quot;highlighter-rouge&quot;&gt;Publisher&lt;/code&gt; and implement the required method. This will not compile yet, because the &lt;code class=&quot;highlighter-rouge&quot;&gt;Subscription&lt;/code&gt; type hasn’t been defined. Note that I’m constraining the downstream Output and Failure to &lt;code class=&quot;highlighter-rouge&quot;&gt;Zip&lt;/code&gt;’s Output and Failure. The method simply creates a &lt;code class=&quot;highlighter-rouge&quot;&gt;Subscription&lt;/code&gt;object and passes it along to the subscriber.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ZipCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Publisher&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Combine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Failure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Failure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Output&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;subscription&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;publishers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publishers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;step-3-create-a-subscription-object-to-return-to-downstream-subscribers-that-does-the-work-of-transforming-the-upstream-output-and-failure-to-the-downstream-input-and-failure&quot;&gt;Step 3: Create a &lt;code class=&quot;highlighter-rouge&quot;&gt;Subscription&lt;/code&gt; object to return to downstream subscribers that does the work of transforming the upstream Output and Failure to the downstream Input and Failure&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ZipCollection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;fileprivate&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Subscription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Combine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Subscription&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Combine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Failure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Failure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Output&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;subscribers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AnyCancellable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;queues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Publishers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

        &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;publishers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Publishers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publishers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;outputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publishers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Publishers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;queues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hasCompleted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;subscribers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publishers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enumerated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publisher&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;publisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;receiveCompletion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;c1&quot;&gt;// Any failure causes the entire subscription to fail.&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;hasCompleted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                    &lt;span class=&quot;n&quot;&gt;completions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

                    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                    &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;hasCompleted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;receiveValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasCompleted&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

                    &lt;span class=&quot;nf&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compactMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;peek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                    &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compactMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;subscribers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;queues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;demand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Subscribers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Demand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a bit more code, because it’s what actually does the work.&lt;/p&gt;

&lt;p&gt;The only property is an array of &lt;code class=&quot;highlighter-rouge&quot;&gt;AnyCancellable&lt;/code&gt; which is used to handle the output of the upstream array of publishers. The &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; method configures each of these to handle the output of the upstream publishers. I use a &lt;code class=&quot;highlighter-rouge&quot;&gt;Queue&lt;/code&gt; to hold on to the received values, and when at least one value has been received from each of the publishers, I dequeue those results and send them on to the downstream subscriber as an array.&lt;/p&gt;

&lt;p&gt;I handle cancellation by sending a &lt;code class=&quot;highlighter-rouge&quot;&gt;cancel()&lt;/code&gt; message to each of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Cancellables&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As I’m not handling back pressure there is an empty implementation of the required &lt;code class=&quot;highlighter-rouge&quot;&gt;request(_)&lt;/code&gt; method.&lt;/p&gt;

&lt;h3 id=&quot;make-it-chainable&quot;&gt;Make it chainable&lt;/h3&gt;

&lt;p&gt;That’s it for the publisher. The only thing left to do is to write some conveniences to allow it to be used with chaining syntax. That’s quite simple:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Collection&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Publisher&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// Combine the array of publishers to give a single array of the `Zip ` of their outputs&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ZipCollection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;ZipCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;closing-thoughts&quot;&gt;Closing thoughts&lt;/h3&gt;

&lt;p&gt;Is this as efficient as &lt;code class=&quot;highlighter-rouge&quot;&gt;Combine&lt;/code&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Zip&lt;/code&gt; functions? I Don’t know. At the call site it’s a lot easier to use this rather than trying to turn 24 requests into 6 batches of Zip4 then a Zip3 and then a Zip2 to chain all 24 requests together (I know, because that was what I started to write). So it solves the problem I had in a way that I wanted to write the code. Also, the more of these that I write, the more comfortable I get writing them, which is another benefit.&lt;/p&gt;

&lt;h3 id=&quot;edit&quot;&gt;Edit&lt;/h3&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://twitter.com/_iains&quot;&gt;Iain Smith&lt;/a&gt; who messaged me to point out that cancellation didn’t clear out the queues I’ve made some minor corrections to the code.&lt;/p&gt;

&lt;h3 id=&quot;code-repository&quot;&gt;Code Repository&lt;/h3&gt;

&lt;p&gt;The code for this is available as part of the &lt;a href=&quot;https://github.com/CombineHarvesters/FoundationCombine&quot;&gt;FoundationCombine&lt;/a&gt; Swift Package available on GitHub. Alongside the &lt;code class=&quot;highlighter-rouge&quot;&gt;CombineLatest&lt;/code&gt; publisher which inspired it.&lt;/p&gt;</content><author><name></name></author><category term="[&quot;development&quot;]" /><category term="combine" /><category term="publishers" /><category term="swift" /><summary type="html">I have an array of publishers: [Publisher&amp;lt;Data, Error&amp;gt;] and want a publisher of the array of their outputs: Publisher&amp;lt;[Data], Error&amp;gt;. The Combine framework provides the Zip family of publishers which only go up to 4 inputs so this won’t suit my needs. I’m going to write about the steps I took to create a publisher that does what I want.</summary></entry><entry><title type="html">The Road to Damascus or FRP and Me</title><link href="http://abizern.org/2017/09/14/the-road-to-damascus-or-frp-and-me.html" rel="alternate" type="text/html" title="The Road to Damascus or FRP and Me" /><published>2017-09-14T00:00:00+01:00</published><updated>2017-09-14T00:00:00+01:00</updated><id>http://abizern.org/2017/09/14/the-road-to-damascus-or-frp-and-me</id><content type="html" xml:base="http://abizern.org/2017/09/14/the-road-to-damascus-or-frp-and-me.html">&lt;p&gt;I tried to learn about Functional Reactive Programming to see whether I would adopt it in my own code. These are my thoughts about it.&lt;/p&gt;

&lt;h3 id=&quot;slides&quot;&gt;Slides&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Available on &lt;a href=&quot;https://speakerdeck.com/abizern/the-road-to-damascus-or-frp-and-me&quot;&gt;Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;video&quot;&gt;Video&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Available on the &lt;a href=&quot;https://vimeo.com/album/4786409/video/235050604&quot;&gt;NSSpain Vimeo Channel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="[&quot;presentation&quot;]" /><category term="nsspain" /><category term="swift" /><category term="frp" /><category term="rxswift" /><summary type="html">I tried to learn about Functional Reactive Programming to see whether I would adopt it in my own code. These are my thoughts about it.</summary></entry><entry><title type="html">Be Your Own Backend Developer</title><link href="http://abizern.org/2017/04/18/be-your-own-backend-developer.html" rel="alternate" type="text/html" title="Be Your Own Backend Developer" /><published>2017-04-18T00:00:00+01:00</published><updated>2017-04-18T00:00:00+01:00</updated><id>http://abizern.org/2017/04/18/be-your-own-backend-developer</id><content type="html" xml:base="http://abizern.org/2017/04/18/be-your-own-backend-developer.html">&lt;p&gt;An overview of server side Swift. I gave this presentation at Code Mobile in Chester. Unfortunataly, although a recording was made of the talk, it’s not available.&lt;/p&gt;

&lt;h3 id=&quot;slides&quot;&gt;Slides&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Available on &lt;a href=&quot;https://speakerdeck.com/abizern/be-your-own-backend-developer&quot;&gt;Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="[&quot;presentation&quot;]" /><category term="swift" /><category term="server-side-swift" /><category term="codemobile" /><summary type="html">An overview of server side Swift. I gave this presentation at Code Mobile in Chester. Unfortunataly, although a recording was made of the talk, it’s not available.</summary></entry><entry><title type="html">Safer Programming With Types</title><link href="http://abizern.org/2016/10/25/safer-programming-with-types.html" rel="alternate" type="text/html" title="Safer Programming With Types" /><published>2016-10-25T00:00:00+01:00</published><updated>2016-10-25T00:00:00+01:00</updated><id>http://abizern.org/2016/10/25/safer-programming-with-types</id><content type="html" xml:base="http://abizern.org/2016/10/25/safer-programming-with-types.html">&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;h3 id=&quot;slides&quot;&gt;Slides&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Available on &lt;a href=&quot;https://speakerdeck.com/abizern/safer-programming-with-types&quot;&gt;Speaker Deck&lt;/a&gt; with speaker notes included.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;video&quot;&gt;Video&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Available on YouTube&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/uR6ox-9VPAA&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name></name></author><category term="[&quot;presentation&quot;]" /><category term="swift" /><category term="swift-london" /><summary type="html">Summary</summary></entry><entry><title type="html">Core Data: It’s Not Dead Yet</title><link href="http://abizern.org/2016/09/23/core-data-its-not-dead-yet.html" rel="alternate" type="text/html" title="Core Data: It’s Not Dead Yet" /><published>2016-09-23T00:00:00+01:00</published><updated>2016-09-23T00:00:00+01:00</updated><id>http://abizern.org/2016/09/23/core-data-its-not-dead-yet</id><content type="html" xml:base="http://abizern.org/2016/09/23/core-data-its-not-dead-yet.html">&lt;p&gt;I spoke at FrenchKit Conference in Paris on why Core Data should not be counted out just yet.&lt;/p&gt;

&lt;h3 id=&quot;slides&quot;&gt;Slides&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Available on &lt;a href=&quot;https://speakerdeck.com/abizern/core-data-its-not-dead-yet&quot;&gt;Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;video&quot;&gt;Video&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The video is available from &lt;a href=&quot;https://youtu.be/iOdg7WOEWWE&quot;&gt;Xebia’s YouTube Channel&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="[&quot;presentation&quot;]" /><category term="frenchkit" /><category term="core-data" /><category term="swift" /><summary type="html">I spoke at FrenchKit Conference in Paris on why Core Data should not be counted out just yet.</summary></entry><entry><title type="html">Being Imperfect In A Perfect World</title><link href="http://abizern.org/2016/09/21/being-imperfect-in-a-perfect-world.html" rel="alternate" type="text/html" title="Being Imperfect In A Perfect World" /><published>2016-09-21T00:00:00+01:00</published><updated>2016-09-21T00:00:00+01:00</updated><id>http://abizern.org/2016/09/21/being-imperfect-in-a-perfect-world</id><content type="html" xml:base="http://abizern.org/2016/09/21/being-imperfect-in-a-perfect-world.html">&lt;p&gt;Just some thoughts on the choices we make about the patterns we use in development.&lt;/p&gt;

&lt;h3 id=&quot;slides&quot;&gt;Slides&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Available on &lt;a href=&quot;https://speakerdeck.com/abizern/being-imperfect-in-a-perfect-world&quot;&gt;Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="[&quot;presentation&quot;]" /><category term="nsbarcelona" /><category term="swift" /><category term="app-architecture" /><category term="mvc" /><category term="mvvm" /><category term="viper" /><category term="rxswift" /><summary type="html">Just some thoughts on the choices we make about the patterns we use in development.</summary></entry><entry><title type="html">Swift London Pre-WWDC Panel</title><link href="http://abizern.org/2016/06/07/swift-london-pre-wwdc-panel.html" rel="alternate" type="text/html" title="Swift London Pre-WWDC Panel" /><published>2016-06-07T00:00:00+01:00</published><updated>2016-06-07T00:00:00+01:00</updated><id>http://abizern.org/2016/06/07/swift-london-pre-wwdc-panel</id><content type="html" xml:base="http://abizern.org/2016/06/07/swift-london-pre-wwdc-panel.html">&lt;p&gt;I was a late addition to this panel, which is my excuse for looking so scruffy.&lt;/p&gt;

&lt;h3 id=&quot;video&quot;&gt;Video&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The video is available on the Swift London YouTube Channel&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/PK1PPNTmGuw&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name></name></author><category term="[&quot;presentation&quot;]" /><category term="swift" /><category term="swift-london" /><category term="wwdc" /><summary type="html">I was a late addition to this panel, which is my excuse for looking so scruffy.</summary></entry><entry><title type="html">Dependency Management With Carthage</title><link href="http://abizern.org/2016/05/02/dependency-management-with-carthage.html" rel="alternate" type="text/html" title="Dependency Management With Carthage" /><published>2016-05-02T00:00:00+01:00</published><updated>2016-05-02T00:00:00+01:00</updated><id>http://abizern.org/2016/05/02/dependency-management-with-carthage</id><content type="html" xml:base="http://abizern.org/2016/05/02/dependency-management-with-carthage.html">&lt;p&gt;Almost a year since the &lt;a href=&quot;http://abizern.org/talks/carthage/&quot;&gt;last time&lt;/a&gt; I gave a talk on this subject at NSLondon. This
is an updated version about Carthage.&lt;/p&gt;

&lt;h3 id=&quot;slides&quot;&gt;Slides&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The slides are available on &lt;a href=&quot;https://speakerdeck.com/abizern/dependency-management-with-carthage&quot;&gt;Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;video&quot;&gt;Video&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The video for this talk is available on &lt;a href=&quot;https://vimeo.com/album/3943556/video/165920026&quot;&gt;Vimeo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="[&quot;presentation&quot;]" /><category term="carthage" /><category term="cocoaheads-stockholm" /><category term="xcode" /><summary type="html">Almost a year since the last time I gave a talk on this subject at NSLondon. This is an updated version about Carthage.</summary></entry><entry><title type="html">Swift Function Overloading By Return Type</title><link href="http://abizern.org/2015/10/11/swift-function-overloading-by-return-type.html" rel="alternate" type="text/html" title="Swift Function Overloading By Return Type" /><published>2015-10-11T00:00:00+01:00</published><updated>2015-10-11T00:00:00+01:00</updated><id>http://abizern.org/2015/10/11/swift-function-overloading-by-return-type</id><content type="html" xml:base="http://abizern.org/2015/10/11/swift-function-overloading-by-return-type.html">&lt;p&gt;As Objective-C developers, we often forget that we can overload functions by
return type. This can often help us create neat APIs. This is best illustrated
by an example.&lt;/p&gt;

&lt;p&gt;I posted a
&lt;a href=&quot;http://abizern.org/2015/10/10/a-swift-repeating-timer/&quot;&gt;wrapper for timer dispatch sources&lt;/a&gt;
yesterday. While I was doing it I noticed a discrepancy with GCD. When creating
a timer dispatch source, times were passed as nanoseconds as a &lt;code class=&quot;highlighter-rouge&quot;&gt;UInt64&lt;/code&gt;, but the
&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_after()&lt;/code&gt; function took nanoseconds as an &lt;code class=&quot;highlighter-rouge&quot;&gt;Int64&lt;/code&gt;. Such things are what
cause hair-pulling and fighting with the type system.&lt;/p&gt;

&lt;p&gt;But most of the time we just want to pass times around as &lt;code class=&quot;highlighter-rouge&quot;&gt;NSTimeInterval&lt;/code&gt;s as
seconds, but we have to convert this to a &lt;code class=&quot;highlighter-rouge&quot;&gt;UInt64&lt;/code&gt; or an &lt;code class=&quot;highlighter-rouge&quot;&gt;Int64&lt;/code&gt;. It’s a better
idea to wrap these creating methods, and function overloading lets us use the
same descriptive name for these functions with different return types. So, here
is some code which you can put in a playground that demonstrates this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/Abizern/c030bd9674b2ad881b44.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;I’m extending &lt;code class=&quot;highlighter-rouge&quot;&gt;NSTimeInterval&lt;/code&gt; which is a typealias for &lt;code class=&quot;highlighter-rouge&quot;&gt;Double&lt;/code&gt; just to make it
clear that these new functions apply to times.&lt;/p&gt;

&lt;p&gt;Note that there are two functions called &lt;code class=&quot;highlighter-rouge&quot;&gt;nSecs()&lt;/code&gt;, but they return different
values. And the strong type system ensures the correct function is used. &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_source_set_timer()&lt;/code&gt; uses the  &lt;code class=&quot;highlighter-rouge&quot;&gt;nSecs() -&amp;gt; UInt64&lt;/code&gt; values, and
the &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_after()&lt;/code&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;nSecs() -&amp;gt; Int64&lt;/code&gt; function&lt;/p&gt;

&lt;p&gt;This example also demonstrates that we should write functions for such
translations, which separates the concerns of creating and transforming values
from the use of those values. It’s something that I don’t do enough of, and I
encourage you do try and do this where you can.&lt;/p&gt;</content><author><name></name></author><category term="[&quot;development&quot;]" /><category term="swift" /><summary type="html">As Objective-C developers, we often forget that we can overload functions by return type. This can often help us create neat APIs. This is best illustrated by an example.</summary></entry><entry><title type="html">Easy JSON formatting</title><link href="http://abizern.org/2015/10/10/easy-json-formatting.html" rel="alternate" type="text/html" title="Easy JSON formatting" /><published>2015-10-10T00:00:00+01:00</published><updated>2015-10-10T00:00:00+01:00</updated><id>http://abizern.org/2015/10/10/easy-json-formatting</id><content type="html" xml:base="http://abizern.org/2015/10/10/easy-json-formatting.html">&lt;p&gt;Sometimes we want to format some JSON. Here’s an easy way to set up a Service in
Automator to make this easier.&lt;/p&gt;

&lt;p&gt;Let’s create a service. Open Automator and choose to create a new Service&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images.abizern.org.s3.amazonaws.com/2015/10/CreateNewService.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the Library, select the “Run Shell Script” action and drag it to the right.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images.abizern.org.s3.amazonaws.com/2015/10/RunShellScript.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the action box type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;json_pp | pbcopy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://images.abizern.org.s3.amazonaws.com/2015/10/JSONPrettyPrint.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is what actually does the formatting. &lt;code class=&quot;highlighter-rouge&quot;&gt;json_pp&lt;/code&gt; comes with OS X
. This
runs the selected text through the tool and puts the result in the
pasteboard.You can paste your formatted output wherever you like.&lt;/p&gt;

&lt;p&gt;Save the action with a name - I’ve called mine &lt;em&gt;JSON Pretty Print&lt;/em&gt;. You should
see the new service installed under &lt;code class=&quot;highlighter-rouge&quot;&gt;~/Library/Services&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Rather than have to paste the result, we can define another service that
replaces the selected text with the result. Create another service as before
except that the action doesn’t put the results on the pasteboard.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;json_pp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://images.abizern.org.s3.amazonaws.com/2015/10/JSONPrettyPrintInPlace.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that the “Output replaces selected text” option is checked.&lt;/p&gt;

&lt;p&gt;Save this action with a name - I’ve called mine &lt;em&gt;JSON Pretty Print In Place&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;An advantage of using the service is that it is intelligent about when to make
the service available. If there is no selection, then the Service is not listed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images.abizern.org.s3.amazonaws.com/2015/10/NoSelection.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If the selection is in a place where the text cannot be pasted, then only the
service that copies the result is presented.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images.abizern.org.s3.amazonaws.com/2015/10/Selection.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But if the text can be pasted in place, the Service is shown.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images.abizern.org.s3.amazonaws.com/2015/10/SelectionInPlace.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see a gif of this in action at this
&lt;a href=&quot;https://dl.dropboxusercontent.com/s/7hb3tyqexojaaxf/2E4B3531-09A5-4514-B556-556E22FBB455-12370-0000275E07F45E21.gif?dl=0&quot;&gt;link&lt;/a&gt; -
I’m linking to this so there isn’t a constantly repeating animation while you
read this.&lt;/p&gt;

&lt;p&gt;Of course, if you are using Emacs, you don’t want to be grabbing the mouse to
get to the action, here’s a lisp function I use to format JSON in place:&lt;/p&gt;

&lt;div class=&quot;language-elisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;json-format&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;Reformats the JSON in the region for humans.&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;save-excursion&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shell-command-on-region&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;mark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;python -m json.tool&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;buffer-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://twitter.com/chrisridd&quot;&gt;Chris Ridd&lt;/a&gt; for pointing out that I could use &lt;code class=&quot;highlighter-rouge&quot;&gt;json_pp&lt;/code&gt;.&lt;/p&gt;</content><author><name></name></author><category term="[&quot;development&quot;]" /><category term="mac" /><category term="automator" /><category term="json" /><category term="lisp" /><summary type="html">Sometimes we want to format some JSON. Here’s an easy way to set up a Service in Automator to make this easier.</summary></entry></feed>