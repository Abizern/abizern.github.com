<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Abizern.org - All posts</title>
        <link>http://abizern.org</link>
        <description><![CDATA[The developer and personal blog of Abizer Nasir, a freelance iOS and OS X developer in London, UK]]></description>
        <atom:link href="http://abizern.org/atom.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Sun, 01 Feb 2015 00:00:00 UT</lastBuildDate>
        <item>
    <title>Debug Logging In Swift</title>
    <link>http://abizern.org/2015/02/01/debug-logging-in-swift/index.html</link>
    <description><![CDATA[<p>In the last <a href="https://iosdevweekly.com/issues/183">iOSDevWeekly</a> Dave Verwer listed Art Sabintsev’s <a href="https://github.com/ArtSabintsev/PrintlnMagic">PrintLnMagic</a> - a small function that reproduces the common DLog pattern that many use which not only prints a value, but the filename, the function name and the line of the call. Which is really handy in debugging.</p>
<p>I use a version of <a href="https://gist.github.com/Abizern/325926">Dlog</a> myself, which has the added benefit of only outputting to the console when in Debug configurations, which PrintLnMagic does not do.</p>
<p>So, I wrote this</p>
<script src="https://gist.github.com/Abizern/a81f31a75e1ad98ff80d.js"></script>
<p>I’m not overriding <code>printLn()</code> because I’m not sure clobbering such a widely used system function is a good idea.</p>
<p>Of course Swift projects don’t work the same way as Objective-C projects, so it isn’t enough to just have the debug configuration, this needs to have the <code>-D DEBUG</code> flag set in the “Other Swift Flags” section under Debug.</p>
<div class="figure">
<img src="http://images.abizern.org.s3.amazonaws.com/2015/01/Debug%20flag%20in%20swift.png" />

</div>
<p>Installation is simple enough, this is just a single bare function, so just download the file and add it to your project. Call <code>loggingPrintln()</code> just as you would <code>println()</code>, only passing a value for the first parameter; the defaults will take care of the rest.</p>]]></description>
    <pubDate>Sun, 01 Feb 2015 00:00:00 UT</pubDate>
    <guid>http://abizern.org/2015/02/01/debug-logging-in-swift/index.html</guid>
</item>
<item>
    <title>Fizz Buzz in Swift</title>
    <link>http://abizern.org/2014/12/13/fizz-buzz-in-swift/index.html</link>
    <description><![CDATA[<p>In August 2014 I gave a talk at NSLondon about various approaches to solving Fizz Buzz in Swift. The video is <a href="http://vimeo.com/105440181">available on Vimeo</a> and proved to be reasonably popular and even gained me my first mention in <a href="https://iosdevweekly.com/issues/167">iOS Dev Weekly</a>.</p>
<p>Just to make this more complete here is a link to the slides and a Swift Playground that you can use to play around with the examples.</p>
<p><a href="http://downloads.abizern.org/FizzBuzzery.zip" class="uri">http://downloads.abizern.org/FizzBuzzery.zip</a></p>
<p>Have fun!</p>]]></description>
    <pubDate>Sat, 13 Dec 2014 00:00:00 UT</pubDate>
    <guid>http://abizern.org/2014/12/13/fizz-buzz-in-swift/index.html</guid>
</item>
<item>
    <title>GCJ B - Cookie Clicker Alpha</title>
    <link>http://abizern.org/2014/04/18/gcj-b---cookie-clicker-alpha/index.html</link>
    <description><![CDATA[<p>Another problem from This year’s Google Code Jam.</p>
<p>The gist of the problem is to work out whether buying additional capacity for cookie production would result is reaching the quota faster than not buying additional capacity.</p>
<p>Haskell is suited to this for a couple of reasons. Firstly, its’ easy to work with infinite lists. so I can create list of the cumulative times for creating factories and reaching the target. And to calculate the cumulative target I’m using the <code>scanl1</code> function to turn the infinite list of factory times into an infinite list of partial sums. I’m using <code>scanl1</code> because it starts at 0, which is important as one of the gotcha’s with this is that it may be faster to just generate cookies rather than buying a factory in the first instance.</p>
<p>Secondly, pattern matching. With the infinite list I’m stopping when the time to reach the target starts growing again. Pattern matching makes this very easy to do.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Control.Monad</span>
<span class="kw">import </span><span class="dt">Numeric</span>


<span class="co">-- https://code.google.com/codejam/contest/dashboard?c=2974486#s=p1</span>
<span class="co">-- Input and output with standard redirection operators</span>

<span class="ot">factoryTimes ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> [<span class="dt">Double</span>]
factoryTimes c f <span class="fu">=</span> <span class="fl">0.0</span> <span class="fu">:</span> [ c <span class="fu">/</span> (<span class="fl">2.0</span> <span class="fu">+</span> k <span class="fu">*</span> f) <span class="fu">|</span> k <span class="ot">&lt;-</span> [<span class="fl">0.0</span>, <span class="fl">1.0</span> <span class="fu">..</span>]]

<span class="ot">productionTimes ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> [<span class="dt">Double</span>]
productionTimes x f <span class="fu">=</span> [ x <span class="fu">/</span> (<span class="fl">2.0</span> <span class="fu">+</span> k <span class="fu">*</span> f) <span class="fu">|</span> k <span class="ot">&lt;-</span> [<span class="fl">0.0</span>, <span class="fl">1.0</span> <span class="fu">..</span>]]

<span class="ot">times ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> [<span class="dt">Double</span>]
times c f x <span class="fu">=</span> zipWith (<span class="fu">+</span>) production factory
  <span class="kw">where</span> production <span class="fu">=</span> productionTimes x f
        factory <span class="fu">=</span> scanl1 (<span class="fu">+</span>) <span class="fu">$</span> factoryTimes c f

<span class="ot">firstMinimum ::</span> [<span class="dt">Double</span>] <span class="ot">-&gt;</span> <span class="dt">Double</span>
firstMinimum (x<span class="fu">:</span>y<span class="fu">:</span>ys) <span class="fu">=</span> <span class="kw">if</span> x <span class="fu">&lt;</span> y
                        <span class="kw">then</span> x
                        <span class="kw">else</span> firstMinimum (y<span class="fu">:</span>ys)

<span class="ot">solve ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span>
solve c f x <span class="fu">=</span> firstMinimum <span class="fu">$</span> times c f x

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  t <span class="ot">&lt;-</span> getLine
  forM_ [<span class="dv">1</span><span class="fu">..</span>read<span class="ot"> t ::</span> <span class="dt">Int</span>] <span class="fu">$</span> \i <span class="ot">-&gt;</span> <span class="kw">do</span>
    [c, f, x] <span class="ot">&lt;-</span> fmap (map read <span class="fu">.</span> words) getLine
    <span class="kw">let</span> result <span class="fu">=</span> solve c f x
    putStrLn <span class="fu">$</span> concat [<span class="st">&quot;Case #&quot;</span>, show i, <span class="st">&quot;: &quot;</span>, Numeric.showFFloat (<span class="dt">Just</span> <span class="dv">7</span>) result <span class="st">&quot;&quot;</span>]
    </code></pre>]]></description>
    <pubDate>Fri, 18 Apr 2014 00:00:00 UT</pubDate>
    <guid>http://abizern.org/2014/04/18/gcj-b---cookie-clicker-alpha/index.html</guid>
</item>
<item>
    <title>GCJ A - Magic Trick</title>
    <link>http://abizern.org/2014/04/18/gcj-a---magic-trick/index.html</link>
    <description><![CDATA[<p>I got through the qualification round for Google Code Jam 2014. I usually manage to get through this stage; it’s the first round that I haven’t managed to get past yet.</p>
<p>The easiest question was A-Magic Trick. Nothing much to do here but count the number of similarities between two arrays, easily achieved with the <code>interact</code> method.</p>
<p>The only gotcha in this problem was that the index of the rows to check is 1-based, and most programming languages use 0-based indexing.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Control.Monad</span>
<span class="kw">import </span><span class="dt">Data.List</span>

<span class="co">-- https://code.google.com/codejam/contest/dashboard?c=2974486#s=p0</span>
<span class="co">-- Input and output with standard redirection operators</span>

<span class="ot">solve ::</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">String</span>
solve a b
  <span class="fu">|</span> l <span class="fu">==</span> <span class="dv">1</span> <span class="fu">=</span> show <span class="fu">$</span> head common
  <span class="fu">|</span> l <span class="fu">&gt;</span> <span class="dv">1</span>  <span class="fu">=</span> <span class="st">&quot;Bad magician!&quot;</span>
  <span class="fu">|</span> otherwise <span class="fu">=</span> <span class="st">&quot;Volunteer cheated!&quot;</span>
  <span class="kw">where</span> common <span class="fu">=</span> a <span class="ot">`intersect`</span> b
        l <span class="fu">=</span> length common

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  t <span class="ot">&lt;-</span> getLine
  forM_ [<span class="dv">1</span><span class="fu">..</span>read<span class="ot"> t ::</span> <span class="dt">Int</span>] <span class="fu">$</span> \i <span class="ot">-&gt;</span> <span class="kw">do</span>
    choice1 <span class="ot">&lt;-</span> fmap read getLine
    initial <span class="ot">&lt;-</span> replicateM <span class="dv">4</span> <span class="fu">$</span> fmap (map read <span class="fu">.</span> words) getLine
    choice2 <span class="ot">&lt;-</span> fmap read getLine
    final <span class="ot">&lt;-</span> replicateM <span class="dv">4</span> <span class="fu">$</span> fmap (map read <span class="fu">.</span> words) getLine
    <span class="kw">let</span> r1 <span class="fu">=</span> initial <span class="fu">!!</span> (choice1 <span class="fu">-</span> <span class="dv">1</span>)
        r2 <span class="fu">=</span> final <span class="fu">!!</span> (choice2 <span class="fu">-</span> <span class="dv">1</span>)
    putStrLn <span class="fu">$</span> concat [<span class="st">&quot;Case #&quot;</span>, show i, <span class="st">&quot;: &quot;</span>, solve r1 r2]</code></pre>]]></description>
    <pubDate>Fri, 18 Apr 2014 00:00:00 UT</pubDate>
    <guid>http://abizern.org/2014/04/18/gcj-a---magic-trick/index.html</guid>
</item>
<item>
    <title>Hakyll New Post With Emacs</title>
    <link>http://abizern.org/2014/01/05/hakyll-new-post-with-emacs/index.html</link>
    <description><![CDATA[<p>When this blog was created using Octopress, a new post could be created by simply running <code>rake new_post</code> in the Terminal. There is no such convenience in Hakyll, which is currently used as the generator. A small thing, but I wanted to fix it.</p>
<p>I could have created a similar Rake task, or shell script to do this, and there are even examples to be <a href="http://jaspervdj.be/hakyll/examples.html">found</a> on Hakyll’s site. But since I’m usually in Emacs when I want to write a new post, I thought it would be a good excuse to write a little lisp. And so, here is my first attempt.</p>
<pre class="sourceCode commonlisp"><code class="sourceCode commonlisp">(<span class="kw">defun</span><span class="fu"> hakyll-site-location </span>()
  <span class="st">&quot;Return the location of the Hakyll files.&quot;</span>
  <span class="st">&quot;~/Sites/hblog/&quot;</span>)

(<span class="kw">defun</span><span class="fu"> hakyll-new-post </span>(title tags)
  <span class="st">&quot;Create a new Hakyll post for today with TITLE and TAGS.&quot;</span>
  (interactive <span class="st">&quot;sTitle: </span>\n<span class="st">sTags: &quot;</span>)
  (<span class="kw">let</span> ((file-name (hakyll-post-title title)))
    (set-buffer (get-buffer-create file-name))
    (markdown-mode)
    (insert
     (<span class="kw">format</span> <span class="st">&quot;---</span>\n<span class="st">title: %s</span>\n<span class="st">tags: %s</span>\n<span class="st">description: </span>\n<span class="st">---</span>\n\n<span class="st">&quot;</span> title tags))
    (write-file
     (expand-file-name file-name (concat (hakyll-site-location) <span class="st">&quot;posts&quot;</span>)))
    (switch-to-buffer file-name)))

(<span class="kw">defun</span><span class="fu"> hakyll-new-note </span>(title)
  <span class="st">&quot;Create a new Note with TITLE.&quot;</span>
  (interactive <span class="st">&quot;sTitle: &quot;</span>)
  (<span class="kw">let</span> ((file-name (hakyll-note-title title)))
    (set-buffer (get-buffer-create file-name))
    (markdown-mode)
    (insert (<span class="kw">format</span> <span class="st">&quot;---</span>\n<span class="st">title: %s</span>\n<span class="st">description: </span>\n<span class="st">---</span>\n\n<span class="st">&quot;</span> title))
    (write-file
     (expand-file-name file-name (concat (hakyll-site-location) <span class="st">&quot;notes&quot;</span>)))
    (switch-to-buffer file-name)))

(<span class="kw">defun</span><span class="fu"> hakyll-post-title </span>(title)
  <span class="st">&quot;Return a file name based on TITLE for the post.&quot;</span>
  (concat
   (format-time-string <span class="st">&quot;%Y-%m-%d&quot;</span>)
   <span class="st">&quot;-&quot;</span>
   (replace-regexp-in-string <span class="st">&quot; &quot;</span> <span class="st">&quot;-&quot;</span> (downcase title))
   <span class="st">&quot;.markdown&quot;</span>))

(<span class="kw">defun</span><span class="fu"> hakyll-note-title </span>(title)
  <span class="st">&quot;Return a file name based on TITLE for the note.&quot;</span>
  (concat
   (replace-regexp-in-string <span class="st">&quot; &quot;</span> <span class="st">&quot;-&quot;</span> (downcase title))
   <span class="st">&quot;.markdown&quot;</span>))</code></pre>
<p>I’m not much of a lisper, and it probably took me longer to write than the time it will save me, but that doesn’t matter. Firstly; it might be useful to somebody else, and so the cumulative time saved could be greater.</p>
<p>Secondly, my day job means I spend most of my coding time in Xcode, which can’t be customised as Emacs can be, and if I don’t spend time writing and learning lisp, I’ll have no chance of getting better at it.</p>
<p>So, I think it’s not bad as a first attempt, although it could obviously be refactored, and you can follow the history of it in my dotfiles <a href="https://github.com/Abizern/prelude/blob/master/personal/hakyll.el">repository</a> if you want to see how it could be developed (or even, you know, help me out with it).</p>]]></description>
    <pubDate>Sun, 05 Jan 2014 00:00:00 UT</pubDate>
    <guid>http://abizern.org/2014/01/05/hakyll-new-post-with-emacs/index.html</guid>
</item>
<item>
    <title>Hello Hakyll</title>
    <link>http://abizern.org/2013/12/26/hello-hakyll/index.html</link>
    <description><![CDATA[<p>This site is now being generated by <a href="http://jaspervdj.be/hakyll/">Hakyll</a> instead of <a href="http://octopress.org">Octopress</a></p>
<p>It’s something I’ve been planning on doing for a while, but feeling a bit burned out on Objective-C / Cocoa and facing a few days downtime over the seasonal holidays now was the time to actually do it.</p>
<p>Octopress is nice, and if you are just using the default theme, it’s easy to get up and running fairly quickly. But I found that updating the site for new versions of Octopress was fragile. I actually managed to break the installation, somehow, and that goes some way to explaining why there wasn’t much posted this year.</p>
<p>Hakyll is written in Haskell, and takes a little bit of work to get set up. Two things that make this a bit more difficult than normal. But, many people have made their site code public as <a href="http://jaspervdj.be/hakyll/examples.html">examples</a>, and this is very useful in getting started. I hope that my source shows up in that list in due course. (<strong>Update</strong> - it is now!).</p>
<p>Despite what some wags may have said on <a href="https://twitter.com/alexrozanski/status/415797308220264448">Twitter</a>; it’s not actually that hip.</p>
<div class="figure">
<img src="http://images.abizern.org/2013/12/hakyll-hipster.png" alt="Twitter screenshot" />
<p class="caption">Twitter screenshot</p>
</div>]]></description>
    <pubDate>Thu, 26 Dec 2013 00:00:00 UT</pubDate>
    <guid>http://abizern.org/2013/12/26/hello-hakyll/index.html</guid>
</item>
<item>
    <title>Git at London Web Standards</title>
    <link>http://abizern.org/2013/05/30/git-at-london-web-standards/index.html</link>
    <description><![CDATA[<p>London Web Standards is focusing on Git for their meeting on <a href="http://londonwebstandards.org/2013/05/lws-june-2013-gitdiet/">17th June</a>. I’m going to be talking on the topic of “Git’s not what you think it is”.</p>
<blockquote>
<p>You think you know Git? Really?</p>
<p>Are you using Git the same tired old way, checking in your changes and pulling from your colleagues? Do you get the sneaking feeling that others are having much more fun with it than you are?</p>
<p>Are you a refusenik, not tempted to use version control because its not for you?</p>
I’m going to challenge some common ideas about Git; I hope to get current users to be more expansive in their use of it, and maybe to bring some new users into the fold.
<footer>
<cite>The abstract</cite>
</footer>
</blockquote>
<p>I’ve been talking about <a href="https://alpha.app.net/abizern">Git</a> since 2009, which is when I became comfortable using it. I’ve heard some reasons for people not using it, or using it in its simplest form. My aim in this talk is to turn those statements on their head; maybe to get people to think about using git, not just as a set of task based recipes (which is a perfectly good way of working), but also to use the parts of it that seem too difficult, or poorly explained.</p>]]></description>
    <pubDate>Thu, 30 May 2013 00:00:00 UT</pubDate>
    <guid>http://abizern.org/2013/05/30/git-at-london-web-standards/index.html</guid>
</item>
<item>
    <title>Setting up for Lisp on OS X</title>
    <link>http://abizern.org/2013/03/31/setting-up-for-lisp-on-os-x/index.html</link>
    <description><![CDATA[<p>This is how I roll, you might choose a different path.</p>
<ol style="list-style-type: decimal">
<li><p>Install Emacs. Get a nice, modern pre-built binary from <a href="http://emacsformacosx.com/">Emacs For Mac OS X</a>. It even supports fullscreen mode</p></li>
<li><p>Install <a href="http://batsov.com/prelude/">Emacs Prelude</a> which provides a useful, opinionated emacs environment which is easily configured.</p></li>
<li><p>Install clisp. I use homebrew so <code>brew install clisp</code> takes care of that for me.</p></li>
<li><p>Install <a href="http://quicklisp.org">quicklisp</a>; from Terminal go to a temporary directory and download quicklisp.lisp with <code>curl -O    http://beta.quicklisp.org/quicklisp.lisp</code>. Then run the lisp file from clisp with <code>clisp -i quicklisp.lisp</code>. As the instructions say, evaluate <code>(quicklisp-quickstart:install)</code>, and then evaluate <code>(ql:add-to-init-file)</code> to load quicklisp along with lisp.</p></li>
<li><p>Install Slime. While you have the clisp repl open, evaluate <code>(ql:quickload    &quot;quicklisp-slime-helper&quot;)</code>. After this runs, you will see some recommendations for what to put into your .emacs file. You don’t need to do this. I did say that Prelude was opinionated, and it’s done this for you. However, it’s not set up for clisp, so instead, add this to your <code>personal/personal.el</code> file: <code>(setq slime-default-lisp 'clisp)</code></p></li>
<li><p>And that should be it. You don’t need to have the clisp repl running in the terminal anymore, and you can delete the <code>quicklisp.lisp</code> file that you downladed, as it’s done it’s job of installation now.</p></li>
<li><p>Test the setup from Emacs by running <code>M-x slime-mode</code> and you’ll be taken to the lisp REPL.</p></li>
</ol>
<p>Now that’s done you can go on to the hard part of actually learning and using lisp.</p>]]></description>
    <pubDate>Sun, 31 Mar 2013 00:00:00 UT</pubDate>
    <guid>http://abizern.org/2013/03/31/setting-up-for-lisp-on-os-x/index.html</guid>
</item>
<item>
    <title>Missing Xcode Toolbar</title>
    <link>http://abizern.org/2013/01/29/missing-xcode-toolbar/index.html</link>
    <description><![CDATA[<p>I’m sure you’ve been there.</p>
<p>You’re working in Xcode, and you have a file opened on another monitor in another window. Unfortunately, you forget about it, and when you close your project and reopen it again, the toolbar is missing.</p>
<div class="figure">
<img src="http://images.abizern.org/2013/01/Missing%20Xcode%20Toolbar.png" alt="Missing Toolbar" />
<p class="caption">Missing Toolbar</p>
</div>
<p>It can be frustrating, because Xcode remembers this, and every time you open the project it will open without a toolbar. You can put it back by right-clicking in what is left of the toolbar and choosing one of the options.</p>
<div class="figure">
<img src="http://images.abizern.org/2013/01/Xcode%20Toolbar%20Menu.png" alt="Toolbar Menu" />
<p class="caption">Toolbar Menu</p>
</div>
<p>But the gotcha that has bit me twice now, and prompted me to write this to remind myself of it, is that you need to choose the “Show Toolbar” menu item rather than one of the other two preferences. I was incorrectly choosing my preference of “Icon Only” and wondering why my preference wasn’t sticking.</p>]]></description>
    <pubDate>Tue, 29 Jan 2013 00:00:00 UT</pubDate>
    <guid>http://abizern.org/2013/01/29/missing-xcode-toolbar/index.html</guid>
</item>
<item>
    <title>Correcting Brace Layout</title>
    <link>http://abizern.org/2012/12/30/correcting-brace-layout/index.html</link>
    <description><![CDATA[<p>I wrote a <a href="http://abizern.org/fixbraces/">small rubygem</a> called <em>fixbraces</em> to move the opening brace of a conditional to the same line as the opening statement.</p>
<p>So now I can correct all the Xcode generated stubs that look like:</p>
<pre class="sourceCode objectivec"><code class="sourceCode objectivec">- (<span class="dt">void</span>)someMethod
{
    <span class="co">// some code here</span>
}</code></pre>
<p>Into my preferred format:</p>
<pre class="sourceCode objectivec"><code class="sourceCode objectivec">- (<span class="dt">void</span>)someMethod {
    <span class="co">// some code here</span>
}</code></pre>
<p>Which fits with my personal coding standards.</p>]]></description>
    <pubDate>Sun, 30 Dec 2012 00:00:00 UT</pubDate>
    <guid>http://abizern.org/2012/12/30/correcting-brace-layout/index.html</guid>
</item>

    </channel> 
</rss>
