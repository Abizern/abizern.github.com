<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Abizer Nasir]]></title>
  <link href="http://abizern.org/atom.xml" rel="self"/>
  <link href="http://abizern.org/"/>
  <updated>2012-04-15T20:15:29+01:00</updated>
  <id>http://abizern.org/</id>
  <author>
    <name><![CDATA[Abizer Nasir]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[London CoderDojo]]></title>
    <link href="http://abizern.org/2012/04/15/london-coderdojo/"/>
    <updated>2012-04-15T18:30:00+01:00</updated>
    <id>http://abizern.org/2012/04/15/london-coderdojo</id>
    <content type="html"><![CDATA[<p>I mentored at <a href="http://zen.coderdojo.com/dojo/74">CoderDojo London</a> this
weekend. These are just some of my thoughts about it.</p>

<!-- more -->




<blockquote><p>CoderDojo is a movement orientated around running free not-for-profit coding clubs and regular sessions for young people.</p><footer><strong>Coder Dojo site</strong> <cite><a href='http://coderdojo.com/about-us/'>coderdojo.com/about-us/&hellip;</a></cite></footer></blockquote>


<p>A regular London chapter has formed, supported by and at the offices of
<a href="http://forwardtechnology.co.uk">Forward Technology</a>.  It takes place in their
canteen/theatre which has a nice tiered seating area and a miked up
presentation stand.</p>

<p>It&#8217;s still the Easter break, but 6 kids turned up with laptops ready to carry on
with projects they had already started and learn new stuff.  It started with a
presentation of what the day&#8217;s agenda was, which I mostly zoned out of as I was
busy churning through the Javascript tutorial on
<a href="http://codecademy.co.uk">Codecademy</a> which was going to covered. I&#8217;m not a web
developer so I didn&#8217;t want to show myself up.</p>

<p>After the opening talk the kids started burning through the tutorials at a
breakneck pace.  Where I went through them a bit slower; they hammered through
the interactive tutorial without (seemingly) worrying about learning what they
were doing. But that wasn&#8217;t the case.  Each succeeding question depended on
knowledge gained in the previous one, and they obviously had retained it. The
mentors watched them going through the exercises and answered questions.  I may
not know Javascript, but I can spot syntax errors and misspelled commands like a
BOSS.  So I wasn&#8217;t useless as I was worried I would be.</p>

<p>After that section (and after a few breaks - these are kids after all) Adam got
everyone to open
<a href="http://elucidatedbinary.com/recanvas">elucidatedbinary.com/recanvas</a> where you
can draw straight into web page and see the results right as you code. And then
step by step got them to follow along first creating a line, then a rectangle
then filling in the rectangle then drawing circles, arcs and trying to draw the
first initial of your name.</p>

<p>This was the most fun of the afternoon. Seeing the results instantaneously
really drove them along. They changed the points to see what would happen
without worrying about what they were doing. The mentors were kept busy helping
them with the syntax, explaing the difference between starting a line and
drawing a line, the coordinate system, points, colours, line thickness. These
were youngsters who don&#8217;t know their way about a keyboard as most of the rest of
us do, but I didn&#8217;t want to correct them because it would break the flow of what
they were doing. I had to draw the letter shapes on paper a couple of times and
walk them through the process of working out what the coordinates of each point
should be.</p>

<p>I showed one girl how to draw an arc on the canvas, went away and when I came
back she proudly showed me that she&#8217;d put two filled circles above the
arc to make a smiley face. Without being told to or shown how.</p>

<p><span class='pullquote-right' data-pullquote='Helping kids program is hard. You can&#8217;t tell them to RTFM '>
One of the extra tasks was to modify a function to draw on the canvas when the
mouse was pressed. I saw one boy go to Stack Overflow, find a similar solution,
and then, rather than just copy-pasting the code, he turned to me and asked me
to explain <code>mousedown</code> to him. (A lesson that many people could stand to learn).
I tweeted about it later:
Helping kids program is hard. You can&#8217;t tell them to RTFM.
Since I would have to refer to the said FM to answer him properly,
I deferred the question to someone who knew what he was talking about.
</span></p>

<p>It was an energising experience. The program is in the early days yet, there
isn&#8217;t a program of tasks to cover. But the enthusiasm of the children and the
mentors is the driving force at the moment.</p>

<p>If you have or know of someone who would be interested in this. Either as a
mentor or a student, please, let them know about it. The sessions are free to
attend, take place in Camden Town on Saturdays between 12-3. You can sign up
with EventBrite, which gives an idea of how many attendees there will be and how
many mentors are available.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rotate a String with Haskell]]></title>
    <link href="http://abizern.org/2012/04/15/rotate-a-string-with-haskell/"/>
    <updated>2012-04-15T15:08:00+01:00</updated>
    <id>http://abizern.org/2012/04/15/rotate-a-string-with-haskell</id>
    <content type="html"><![CDATA[<p>I qualified for <a href="http://code.google.com/codejam">Google Code Jam</a> this year
answering 3 out of 4 questions. I have no illusions about progressing very far,
but I&#8217;m using it as an excuse to learn some Haskell and to write code faster.</p>

<p>As part of the learning process, I took one of my correct solutions over to the
nice folks at the #haskell channel over on freenode and asked if there was a
better way to do it. I learned something surprising.</p>

<!-- more -->


<p>As part of the solution to the
<a href="http://code.google.com/codejam/contest/1460488/dashboard#s=p2">Recycled Numbers</a>
problem required turning a number such as 1234 into a list of numbers with the
digits rotated [4123, 3412, 2341]. User TSC2 in the channel gave me this simple
way of doing it:</p>

<figure class='code'><figcaption><span>ghci console</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ghci&gt; <span class="o">(</span><span class="se">\x</span>s -&gt; <span class="nb">let </span><span class="nv">n</span> <span class="o">=</span> length xs in <span class="o">(</span>tail . take n . map <span class="o">(</span>take n<span class="o">)</span> . tails . cycle<span class="o">)</span> xs<span class="o">)</span> <span class="s2">&quot;abcde&quot;</span>
</span><span class='line'><span class="o">[</span><span class="s2">&quot;bcdea&quot;</span>,<span class="s2">&quot;cdeab&quot;</span>,<span class="s2">&quot;deabc&quot;</span>,<span class="s2">&quot;eabcd&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;m still new to this so I had to work it out on paper, but here is a step by
step explanation of what is happening: working from right to left as the
functions are evaluated:</p>

<figure class='code'><figcaption><span>xs </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"abcde"</span></code></pre></td></tr></table></div></figure>


<p><code>xs</code> is just the input string.</p>

<figure class='code'><figcaption><span>cycle </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"abcdeabcde..."</span></code></pre></td></tr></table></div></figure>


<p><code>cycle</code> creates an infinite list out of the input list by repeating it. Haskell
is lazy. It doesn&#8217;t actually create the list until it actually needs it, so I&#8217;ve
added the ellpises just to show the concept that this is repeated infinitely.</p>

<figure class='code'><figcaption><span>tails </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>["abcdeabcde...", "bcdeabcdea...", "cdeabcdeab...", "deabcdeabc...", ...]</span></code></pre></td></tr></table></div></figure>


<p>This is where things start to get interesting. <code>tails</code> creates a list out of
successive tails of a list. If you were to do this on a finite list you&#8217;d get a
list of smaller and smaller elements. For example:</p>

<figure class='code'><figcaption><span>ghci console</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ghci&gt; tails <span class="s2">&quot;abcde&quot;</span>
</span><span class='line'><span class="o">[</span><span class="s2">&quot;abcde&quot;</span>,<span class="s2">&quot;bcde&quot;</span>,<span class="s2">&quot;cde&quot;</span>,<span class="s2">&quot;de&quot;</span>,<span class="s2">&quot;e&quot;</span>,<span class="s2">&quot;&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>But since our input is an infinite we now have an infinite list of infinite
lists, each element starting at one letter in from the original list. Remember,
this hasn&#8217;t actually been worked out yet.</p>

<figure class='code'><figcaption><span>map (take n) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>["abcde", "bcdea", "cdeab", "deabc", "eabcd" "abcde", ...]</span></code></pre></td></tr></table></div></figure>


<p><code>take n</code> takes the first <code>n</code> elemets of a list. Our lambda expression defines
this as the length of the list, which is 5. And <code>map</code> applies this to each
element of the list. So now we have an infinite list of 5 element lists. which is
closer to our required final output.</p>

<figure class='code'><figcaption><span>take n </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>["abcde", "bcdea", "cdeab", "deabc", "eabcd"]</span></code></pre></td></tr></table></div></figure>


<p>Applying <code>take n</code> again to the infinite list takes the first 5 elements of the
finite list</p>

<figure class='code'><figcaption><span>tail </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>["bcdea", "cdeab", "deabc", "eabcd"]</span></code></pre></td></tr></table></div></figure>


<p>Applying <code>tail</code> to the finite list takes all but the first element, and we get
the output that we were looking for. Even though along the way we had an
infinite list of infinite lists.</p>

<p>And yet all Haskell did was provide a promise (a <em>thunk</em> in functional terms)
that it would provide the answer when it was asked for, and as the function
progressed the infinite list of infinite list became an infinite list of finite
lists and then a finite list. And still it didn&#8217;t actually resolve all those
calls until it was actually needed. In this case, when the <em>ghci</em> interpreter
tried to get a string to display on the screen.</p>

<p>Freaky or what?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reverse Words With Haskell]]></title>
    <link href="http://abizern.org/2012/04/09/reverse-words-with-haskell/"/>
    <updated>2012-04-09T15:41:00+01:00</updated>
    <id>http://abizern.org/2012/04/09/reverse-words-with-haskell</id>
    <content type="html"><![CDATA[<p>As part of my preparation for <a href="http://code.google.com/codejam">Google Code Jam</a>
I&#8217;ve been working through the practice problems with Haskell.</p>

<p>I make a screencast on solving the
<a href="http://code.google.com/codejam/contest/351101/dashboard#s=p1">Reverse Words</a>
problem, along with the mechanics of getting the problem inputs and submitting solutions. The style was heavily influenced by a sequence on
<a href="http://youtu.be/045422s6xik?hd=1">Data Driven Programming in Haskell</a> by
<a href="http://entirelysubjective.com/programming/data-driven-programming-haskell-1/">Jonas Tullus</a></p>

<!-- more -->


<p>I moved at a slower pace, and talking and typing seem to have confused my brain
so I think I lapsed into gibberish in a couple of places. (If you know me,
you&#8217;ll know that&#8217;s nothing new).</p>

<iframe width="640" height="510" src="http://www.youtube.com/embed/_tgv3HVgOMc  " frameborder="0" allowfullscreen></iframe>


<p>Here&#8217;s the cleaned up source file.</p>

<div><script src='https://gist.github.com/2368757.js?file='></script>
<noscript><pre><code>module Main where

{-
 - http://code.google.com/codejam/contest/351101/dashboard#s=p1
 -}

{-
 - Usage either compile or use runhaskell / runghc
 - Pass the input file as the sole command line argument
 - Redirect output if you want the results to go in a file
 -}

import IO
import System.Environment
import Data.List

reverseWords :: String -&gt; String
reverseWords = unwords . reverse . words

boilerPlate :: [String]
boilerPlate = [&quot;Case #&quot; ++ show n ++ &quot;: &quot; | n &lt;- [1..]]

standardOutput :: [String] -&gt; [String]
standardOutput = zipWith (++) boilerPlate

main =  do
  (f:_) &lt;- getArgs
  file  &lt;- readFile f

  let cases     = tail $ lines file
      solutions = standardOutput $ map reverseWords cases
  putStrLn $ unlines $ solutions
</code></pre></noscript></div>


<p>I need to learn more Emacs shortcuts :(</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Ignore file]]></title>
    <link href="http://abizern.org/2012/03/19/git-ignore-file/"/>
    <updated>2012-03-19T23:27:00+00:00</updated>
    <id>http://abizern.org/2012/03/19/git-ignore-file</id>
    <content type="html"><![CDATA[<p>A while ago I answered a couple of questions on Stack Overflow using my
<code>.gitignore</code> file as an example. I find it strangely satisfying to find that
there are projects on GitHub that use it, and even the odd blogs has put it up
as well.</p>

<p>I might as well have it on my own site:</p>

<!-- more -->




<div><script src='https://gist.github.com/708713.js?file='></script>
<noscript><pre><code># Mac OS X
*.DS_Store

# Xcode
*.pbxuser
*.mode1v3
*.mode2v3
*.perspectivev3
*.xcuserstate
project.xcworkspace/
xcuserdata/

# Generated files
*.o
*.pyc

#Python modules
MANIFEST
dist/
build/

# Backup files
*~.nib
\#*#
.#*
</code></pre></noscript></div>


<p>It&#8217;s particularly suited for Xcode. It excludes the workspace settings, which
also includes the breakpoints, so don&#8217;t be surprised if they don&#8217;t carry over in
clones. It also excludes the build schemes unless you mark them as shared.</p>

<p>I&#8217;ve got this as a global ignore file for my system - and if I&#8217;m going to push a
repository elsewhere I just copy it into the repo&#8217;s directory.</p>

<p>It&#8217;s simple to do. If you&#8217;re not familiar with ignore files I&#8217;ve written about
the
<a href="http://365git.tumblr.com/post/519016351/three-ways-of-excluding-files">Three ways of excluding files with Git</a>
elsewhere.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Localisation Testing]]></title>
    <link href="http://abizern.org/2012/03/18/simple-localisation-testing/"/>
    <updated>2012-03-18T08:44:00+00:00</updated>
    <id>http://abizern.org/2012/03/18/simple-localisation-testing</id>
    <content type="html"><![CDATA[<p>Sometimes you want to test your localisations but you don&#8217;t want to go through the hassle of
changing the settings on the simulator, or device, or your Mac for each one. There&#8217;s always the fear
of setting some language that you don&#8217;t understand.</p>

<p>But, with Xcode4 schemes and a little argument passing this is a lot easier than it used to be. You
can set up a scheme for each localisation which will let you run your iOS or Mac app under that
localisation without having to change any settings.</p>

<!-- more -->


<p>Just to make it easier, you can have a look at an example Xcode Workspace that I&#8217;ve
<a href="https://github.com/Abizern/SimpleLocalisationTesting" title="Simple Localisation
Testing">put up on Github</a>. This has two projects within it, one for the Mac and one for the iPhone.</p>

<p><img src="http://images.abizern.org/2012/03/Schemes.png" width="631" height="111" title="Xcode Schemes" ></p>

<p>Start by having a look at the schemes. There are two projects with two schemes each, one for each
localisation. Handily named so you can tell which is for which.</p>

<p><img class="top" src="http://images.abizern.org/2012/03/RunAction_en.png" width="525" height="135" title="en run action" ></p>

<p><img class="top" src="http://images.abizern.org/2012/03/RunAction_es.png" width="525" height="133" title="en run action" ></p>

<p>If you have a a look at the run action for these schemes you can see the arguments that I am
passing. First the <code>-AppleLanguages</code> argument and then the two character country code (with the
brackets back-slash escaped).</p>

<p>That&#8217;s all there is to it. Now you just have to pick the scheme to run and it will load up that
localisation without you having to change it on the simulator. It even works for running debug
builds on the device.</p>

<p>Of course, you should test it properly eventually, but while you are developing, it&#8217;s a quick way to
get feedback about how your localisations appear.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octopress]]></title>
    <link href="http://abizern.org/2012/03/17/hello-octopress/"/>
    <updated>2012-03-17T18:02:00+00:00</updated>
    <id>http://abizern.org/2012/03/17/hello-octopress</id>
    <content type="html"><![CDATA[<p>This is the obligatory post announcing that I&#8217;ve moved this site off Wordpress
to <a href="http://Octopress.org" title="Octopress - The blogging framework for
hackers">Octopress</a>. It&#8217;s been almost a year since I posted anything. And most of what I
did publish was about <a href="http://nscodernightlondon.com" title="NSCoder
Night London's page">NSCoder Night</a>.</p>

<p>The old site had the Solarized Dark theme - and once I saw that the code
formatting on Octopress was that by default I decided to make the move. Now I
can happily write Markdown formatted posts with Emacs and see an almost live
preview of how it will look when published. I get to keep it on
<a href="http://github.com" title="GitHub">GitHub</a> and have it in a repository.</p>

<p>I&#8217;ve tried to set the general colours to Solarized Light. Seems okay so far but
still plenty of room for tweaking.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSCoder Night London Now Has It's Own Page]]></title>
    <link href="http://abizern.org/2011/04/14/nscoder-night-london-now-has-its-own-page/"/>
    <updated>2011-04-14T20:01:01+01:00</updated>
    <id>http://abizern.org/2011/04/14/nscoder-night-london-now-has-its-own-page</id>
    <content type="html"><![CDATA[<p>It&#8217;s been over a year that I&#8217;ve been running the NSCoder Night meetings in
London from here, but I&#8217;ve now moved it to a site of its own. You can now get
all the information from
<a href="http://nscodernightlondon.com">NSCoderNightLondon.com</a>.</p>

<p>Blog style entries never really worked. I hope that having everything together
in just a few pages on a site makes it easier for people who want to turn up.</p>

<p>I hope that it floats up higher in Google Rankings as well. This will also make
it easier for people who want to turn up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just Enough GPG for git]]></title>
    <link href="http://abizern.org/2011/01/17/just-enough-gpg-for-git/"/>
    <updated>2011-01-17T15:52:38+00:00</updated>
    <id>http://abizern.org/2011/01/17/just-enough-gpg-for-git</id>
    <content type="html"><![CDATA[<p>It came about that I wanted to do some work with git and signed tags. It&#8217;s been
a while since I had looked at this, I&#8217;ve got some old entries up on keyservers
that date back to 1999, and never on a Mac.</p>

<p>It turns out that it is quite simple to set up a minimal
<a href="http://en.wikipedia.org/wiki/Pretty_Good_Privacy">GPG</a> environment – one that
lets you work on the command line without having to set it up for Mail.app. This
is about all I need it for.</p>

<!-- more  -->


<p>The <a href="http://www.gpgtools.org/index.html">GPGTools project</a> has recently
resurrected the <a href="http://macgpg.sourceforge.net/">MacGPG project</a> to provide
email encryption and tools to the Mac. It is still in development, and I didn&#8217;t
want to mess about with my Mail installation so rather than install the complete
set of tools, I chose to install <a href="http://www.gpgtools.org/macgpg2.html">MacGPG2</a>
and <a href="http://www.gpgtools.org/keychain.html">GPGKeychain Access</a></p>

<p><a href="http://www.gpgtools.org/macgpg2.html">MacGPG2</a> is the
<a href="http://en.wikipedia.org/wiki/Pretty_Good_Privacy#OpenPGP">OpenPGP</a>
implementation for the Mac. This installs gpg2 into /usr/local/bin and gpg is
symlinked to gpg2. I only mention this because although the commands can all be
issued as gpg, you get to the documentation by using man gpg2, not man
gpg. Installation is through an installer package.</p>

<p><a href="http://www.gpgtools.org/keychain.html">GPGKeychain Access</a> does not integrate
with the Mac Keychain as the name might suggest, but provides a window to look
at and manage the keys that you have on your system. These are usually under
~/.gnupg/ Run the installer, and create your keys. It&#8217;s quite simple and there
is a video on the project page. However, there are a couple of things that you
should keep in mind. If you forget your passphrase you can&#8217;t use your private
key anymore. And if you&#8217;ve published the key, you won&#8217;t be able to revoke it and
it will just sit around on keyservers. So, set an expiry date on your keys in
case you do lose the private key or passphrase. As the expiry date comes up just
extend it again.</p>

<p>There is no key-server configured. There seems to be a ticket for this to be
implemented in some future milestone. Until then, create a file called gpg.conf
under ~/.gnupg and put this line in it:</p>

<pre><code>keyserver hkp://pgp.mit.edu
</code></pre>

<p>And that is just enough so that when you use the menu items that send and get
keys from keyservers they will work. As far as I know, these servers talk to
each other, so writing to one makes the key visible on the others.</p>

<p>Synchronisation of keys is an issue. If you are adventurous you could add more
entries to the gpg.conf file to use a central location for the keyrings,
somewhere like Dropbox or iDisk, so that all your machines can use the same
files. But, it&#8217;s just as easy to export the keys as text and use those files to
keep different machines in sync. Partcularly if you will be using gpg rarely.</p>

<p>This has been a companion piece to the non-Mac centric
<a href="http://365git.tumblr.com/">365Git</a> post about
<a href="http://365git.tumblr.com/post/2796779828/signing-a-git-tag">signed tags</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Staying Flash-free on a MacBook Air]]></title>
    <link href="http://abizern.org/2010/11/21/staying-flash-free-on-a-macbook-air/"/>
    <updated>2010-11-21T17:46:57+00:00</updated>
    <id>http://abizern.org/2010/11/21/staying-flash-free-on-a-macbook-air</id>
    <content type="html"><![CDATA[<p>You may have seen John Gruber&#8217;s posts on
<a href="http://daringfireball.net/2010/11/flash_free_and_cheating_with_google_chrome">uninstalling system-wide flash</a>
and
<a href="http://daringfireball.net/2010/11/masquerading_as_mobile_safari">changing the Safari User Agent</a>
to view some sites that have Flash content.</p>

<p>The new MacBook Airs don&#8217;t have Flash installed by default so this is a
<a href="http://en.wikipedia.org/wiki/Wikipedia:Too_long;_didn%27t_read">tl:dr</a> summary
of those two articles so you don&#8217;t have to download and install the system-wide
Flash player.</p>

<p>Many sites, such as <a href="http://youtube.com">YouTube</a>, provide content in an
alternative format for devices that do not have Flash installed. Get access to
this from Safari by turning on the &#8216;Develop&#8217; menu (Preferences | Advanced) and
change the User Agent to &#8216;Mobile Safari 3.2.2 iPad&#8217;. This works per tab|window
so doesn&#8217;t change the display in what you already have open.</p>

<p>If this still doesn&#8217;t work (I&#8217;m looking at you
<a href="http://www.bbc.co.uk/iplayer/">iPlayer</a>) then you can use Google&#8217;s Chrome
browser, which comes with its own Flash plug-in.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting the address of a shortened URL]]></title>
    <link href="http://abizern.org/2010/10/16/getting-the-address-of-a-shortened-url/"/>
    <updated>2010-10-16T22:05:52+01:00</updated>
    <id>http://abizern.org/2010/10/16/getting-the-address-of-a-shortened-url</id>
    <content type="html"><![CDATA[<p>Many times you will see a shortened url but you aren&#8217;t sure what it points
at. Here&#8217;s a little tip that I picked up from
<a href="http://tommorris.org">Tom Morris</a>.</p>

<p>Pop open your terminal, or console, or whatever your command-line application is
and type the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl --head shorturl
</span></code></pre></td></tr></table></div></figure>


<p>This pops up a short amount of useful information about the target url. For
example the response for the Google short URL for this site shows this;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~ % curl --head http://goo.gl/oQx8
</span><span class='line'>HTTP/1.1 301 Moved Permanently
</span><span class='line'>Content-Type: text/html; <span class="nv">charset</span><span class="o">=</span>UTF-8
</span><span class='line'>Expires: Sat, 16 Oct 2010 21:01:51 GMT
</span><span class='line'>Date: Sat, 16 Oct 2010 21:01:51 GMT
</span><span class='line'>Cache-Control: private, max-age<span class="o">=</span>86400
</span><span class='line'>Location: http://abizern.org/
</span><span class='line'>X-Content-Type-Options: nosniff
</span><span class='line'>X-Frame-Options: SAMEORIGIN
</span><span class='line'>X-XSS-Protection: 1; <span class="nv">mode</span><span class="o">=</span>block
</span><span class='line'>Server: GSE
</span><span class='line'>Transfer-Encoding: chunked
</span></code></pre></td></tr></table></div></figure>


<p>And you can see that the Location shows that you aren&#8217;t going to get
Rick-rolled.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DVCS at LiDG]]></title>
    <link href="http://abizern.org/2010/10/08/dvcs-at-lidg/"/>
    <updated>2010-10-08T14:19:12+01:00</updated>
    <id>http://abizern.org/2010/10/08/dvcs-at-lidg</id>
    <content type="html"><![CDATA[<p>I gave a short presentation to the London iPhone Developer Group at the Apple
store in London this week.</p>

<p>20 minutes is far too short to cover such a large subject but I did what I
could. I have been given another opportunity to present in the future and I&#8217;m
going to skip the boring beginner bits and just cover 3 or 4 advanced Git
techniques which should be more fun.</p>

<p>For what it&#8217;s worth, here are the slides. Probably not much help unless you were
there (I prefer more talk and less slides) and I apologise for being weak and
using bullet points.</p>

<p><a href="http://goo.gl/vCCP">Download the Keynote presentation</a> (540 kb)</p>

<p><a href="http://goo.gl/JPJR">Download the PDF slides</a> (220 kb)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blackjack and the Python Dojo]]></title>
    <link href="http://abizern.org/2010/10/08/blackjack-and-the-python-dojo/"/>
    <updated>2010-10-08T13:04:38+01:00</updated>
    <id>http://abizern.org/2010/10/08/blackjack-and-the-python-dojo</id>
    <content type="html"><![CDATA[<p>&#8220;A coding dojo is a safe place to deliberately practice and develop your coding
skills.&#8221;</p>

<p>I went to my first
<a href="http://ldnpydojo.eventwax.com/london-python-code-dojo-season-2-episode-2">London Python Dojo</a>
last night and had a better time than I expected. I know a little
<a href="http://en.wikipedia.org/wiki/Python_(programming_language">Python</a>) (just
enough to hurt myself). I was intrigued by this event where the idea was to
learn together rather than just share knowledge.</p>

<!-- more -->


<p>The evening started off with beer and pizza, thanks to our hosts
<a href="http://www.fry-it.com/">Fry-IT</a>, and then moved on to two short
presentations. The first was on FluidDb and the second was something to do with
creating Python packages. Yes, both were over my head.</p>

<p>After that there was a short discussion about a problem to attempt. A blackjack
game was suggested and we split into 5 groups of four and had a little under an
hour to solve this. I didn&#8217;t have much confidence that we could do it. One
person sat at a laptop, we spent about 5 minutes deciding on the approach to use
and then the typing started.</p>

<p>I wouldn&#8217;t have been able to write the code as quickly as it was being knocked
out, but I could understand it. And although we were all talking there were no
arguments and we pushed through and got a working program done (with one easily
fixed bug) just in time. Although not strictly <a href="Pair%0Aprogramming">pair programming</a>, I can see why that approach can generate quality code quickly.</p>

<p>But that wasn&#8217;t it. Each team demoed their solution and showed their code. This
was just as useful as writing the program in the first place. Because we had all
been thinking about the same problem it was easy to understand the different
approaches that were presented. There were class based solutions as well as
functional ones (some had tests!) and we even saw the major development
environments - Macs running vi, Linux machines with Emacs, and Notepad++ on
Windows. We also saw a solution using Python3.</p>

<p>I enjoyed this more than I expected. It was nice to be able to contribute even
though I&#8217;m not that experienced with Python, and I learned plenty just by
watching and asking questions. It was a welcoming bunch and I will certainly be
going again. And this time I&#8217;ll pay more attention to people&#8217;s names.</p>

<p>I don&#8217;t think anybody used version control, though&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Year of Git]]></title>
    <link href="http://abizern.org/2010/03/24/a-year-of-git/"/>
    <updated>2010-03-24T16:52:31+00:00</updated>
    <id>http://abizern.org/2010/03/24/a-year-of-git</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been inspired by Pieter Omvlee of
<a href="http://bohemiancoding.com">Bohemian Coding</a> and his
<a href="http://365Cocoa.tumblr.com">365Cocoa</a> to set up my own contribution.</p>

<p>I&#8217;m going to try and and fill a year with <a href="http://git-scm.com">git</a> tips and
inspirations over at <a href="http://365git.tumblr.com">365git</a>. I’ve got a few weeks
worth of ideas but if anyone wants to know anything or has a suggestion, I’ll
gratefully consider them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Renaming an Xcode Project]]></title>
    <link href="http://abizern.org/2010/03/06/renaming-an-xcode-project/"/>
    <updated>2010-03-06T16:48:19+00:00</updated>
    <id>http://abizern.org/2010/03/06/renaming-an-xcode-project</id>
    <content type="html"><![CDATA[<p>You may have occasion to rename an Xcode project.</p>

<p>You can find step-by-step instructions and scripts with a little bit of
Googling. But there is another way. If you&#8217;re running Xcode 3.2 on Snow Leopard
there is a menu item you can use instead. Have a look at the Project > Rename…
menu item instead.</p>

<p><img src="http://images.abizern.org.s3.amazonaws.com/2010/03/XcodeRename.png" alt="Project &gt; Rename…" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Year Of Objective-C Snippets ]]></title>
    <link href="http://abizern.org/2010/02/27/a-year-of-objective-c-snippets/"/>
    <updated>2010-02-27T17:20:29+00:00</updated>
    <id>http://abizern.org/2010/02/27/a-year-of-objective-c-snippets</id>
    <content type="html"><![CDATA[<p>Pieter Omvlee of <a href="http://www.bohemiancoding.com/">Bohemian Coding</a> has been
inspired to post a snippet of Objective-C/Cocoa code every day for a year.</p>

<p>It’s a great idea and starts with a useful category on NSArray. Go and see what
you can learn over at
<a href="http://365cocoa.tumblr.com/">http://365cocoa.tumblr.com/</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Simple Answer Is Not Always Best]]></title>
    <link href="http://abizern.org/2010/01/08/a-simple-answer-is-not-always-best/"/>
    <updated>2010-01-08T22:01:26+00:00</updated>
    <id>http://abizern.org/2010/01/08/a-simple-answer-is-not-always-best</id>
    <content type="html"><![CDATA[<p>On New Year&#8217;s eve, Dámasa asked me to calculate some fraction of a fraction and
provide the answer as a fraction in eighths. The post had just arrived so I
flipped over an envelope and started working it out.</p>

<p>&#8220;Why do you need the answer in eighths?&#8221; I asked.</p>

<p>&#8220;Because I&#8217;m trying to convert a recipe and my scales only go down to eighths of an ounce.&#8221;</p>

<p>&#8220;Why don&#8217;t you just use grams?&#8221;</p>

<p>&#8220;…&#8221;</p>

<p>This little episode reminded me of an
<a href="http://weblogs.asp.net/alex_papadimoulis/archive/2005/05/25/408925.aspx">article</a>
by Alex Papadimoulis where he used the analogy of being asked whether it was
better to use a bottle or a shoe to pound a nail. Although there are situations
where either could be used, the real answer is, of course, to use a
hammer. Sometimes we are asked questions to which we can provide an answer; but
perhaps we should first stop and ask the reason for the question before
answering it.</p>

<p>Let&#8217;s take <a href="http://stackoverflow.com">Stack Overflow</a> as an example. The
programmer&#8217;s question and answer site that is also a game. &#8216;Good&#8217; behaviour,
such as asking good questions, providing helpful answers, are rewarded by
upvotes, &#8216;bad&#8217; behaviour; lazy questions, incorrect answers, are discouraged by
downvotes. It is becoming increasingly common to find a Stack Overflow link as
the top hit when searching the web for answers to programming questions. But, if
you follow a mailing list for your chosen speciality it isn&#8217;t hard to see the
same question in both places and different approaches to answering them.</p>

<p>Stack Overflow&#8217;s
<a href="http://meta.stackoverflow.com/questions/19665/the-help-vampire-problem/19673#19673">recommended approach</a>
to <a href="http://slash7.com/2006/12/22/vampires/">help vampires</a> is a pragmatic
one. Essentially, you can either be aloof and use the tools of the site to
discourage the behaviour; or you could just answer the question and get some
points. On a mailing list like, say, CocoaDev, a weak question will get sharp
answers (if any); but on Stack Overflow, somebody might just answer the question
because they get something out of it.</p>

<p>This might be useful to somebody. I&#8217;m sure there are times where we all just
need a quick answer to question without deeper knowledge. Get help with the
&#8216;how&#8217; to get something done, and pick up on the &#8216;why&#8217; later.  But read enough
questions in public forums and you&#8217;ll soon recognise those who just want to know
the &#8216;how&#8217;, and no amount of saying they need to learn the basics is going to
help. Maybe back up and ask why they are asking so you can better answer their
question.</p>

<p>To tie this back to fractions, have a look at this
<a href="http://republicofmath.wordpress.com/2010/01/08/richard-skemps-relational-understanding-and-instrumental-understanding/">Republic of Math post</a>
about the difference between relational and instrumental understanding in
mathematics. A particular example is how the invert and multiply method of
fractional division is widely taught without actually developing an
understanding of the operation itself. When I was 14 my elder brother taught me
<a href="http://en.wikipedia.org/wiki/Derivative">differentiation</a>. Not by saying
&#8220;subtract one from the exponent and multiply&#8221;, but rather by drawing a curve and
working through calculating a tangent using deltas and differences tending to
zero and how it led to the simpler method. I&#8217;ve long forgotten the hard way, but
after that I was very good at calculus.</p>

<p>Perhaps this is something to think about next time you see somebody ask how to
write an application without using Interface Builder.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some tips for lazy Xcoders]]></title>
    <link href="http://abizern.org/2009/11/11/some-tips-for-lazy-xcoders/"/>
    <updated>2009-11-11T12:40:53+00:00</updated>
    <id>http://abizern.org/2009/11/11/some-tips-for-lazy-xcoders</id>
    <content type="html"><![CDATA[<p>We all know what we should be doing when writing code. Each methodology you
choose to use has it&#8217;s own best practices, whether it&#8217;s working from full
specifications, writing unit tests first, programming in pairs, yadda,
yadda. But, as developers, we&#8217;re only human, and we&#8217;re lazy. We have tools to
make things easy for us. Here are a few tips that you can use to help when
you&#8217;re not as rigorous in your coding as you should be.</p>

<h2>Use the static analyser.</h2>

<p>You can use the
<a href="http://arstechnica.com/apple/reviews/2009/08/mac-os-x-10-6.ars/9#compilers">Clang Static Analyser</a>
in Xcode by setting a build option. This will find a whole host of errors in
your code, even down to unconventionally named functions.</p>

<p><img src="http://images.abizern.org.s3.amazonaws.com/2009/11/ClangBuildSetting.png" alt="ClangBuildSetting.png" /></p>

<p>Now you can just code away and have the compiler pick up your mistakes when you
run &#8216;Build and Analyze&#8217; (⌘+Shift+A).</p>

<h2>Find your mistakes quickly.</h2>

<p>Any real application you develop will have a large number of resources that need
to be copied to your application bundle. The default projects that Xcode create
for you will copy these files first before compiling.</p>

<p><img src="http://images.abizern.org.s3.amazonaws.com/2009/11/XcodeDefault.png" alt="XcodeDefault.png" /></p>

<p>But, the lazy Xcoder knows that there are probably errors in the code that need
to get flagged by the compiler, so this copying is a waste of time. Reorder the
build steps by dragging so that the compilation is done first.</p>

<p><img src="http://images.abizern.org.s3.amazonaws.com/2009/11/XcodeRecommended.png" alt="XcodeRecommended.png" /></p>

<p>Your builds will now break early (and often!).</p>

<h2>Don&#8217;t fear the version controller.</h2>

<p>I&#8217;m going to stick my neck out and say that if you&#8217;re not using version control
you&#8217;re an idiot. The lazy Xcoder uses a powerful system that lets him or her
branch easily, make lots of little changes, and lots of mistakes (that can be
backed out). These changes can then be bundled into larger commits to be merged
into the main branch so that your co-workers don&#8217;t see what an idiot you&#8217;ve
been.</p>

<p>One such version control system is <a href="http://git-scm.com/">git</a>. The lazy Xcoder
writes a bit of code, checks it in out of habit and then compiles. The compiler
picks up the mistakes, and he or she fixes them. Rather than make a new commit,
and retype the commit message, just call:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git commit --amend -a -C HEAD
</span></code></pre></td></tr></table></div></figure>


<p>This will bring up the previous commit message in the editor, which you can
amend if you wish. This new commit will replace the previous one. The <code>-a</code>
option means you don&#8217;t even need to do a git add and the <code>-C HEAD</code> option means
it will use the commit message from the last commit.</p>

<p>Of course, if you&#8217;re a rockstar programmer, you don&#8217;t make mistakes at this
level. But I&#8217;m not, and I prefer to work with human nature rather than against
it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrating git with SubEthaEdit and Changes.app]]></title>
    <link href="http://abizern.org/2009/11/08/integrating-git-with-subethaedit-and-changes/"/>
    <updated>2009-11-08T16:41:02+00:00</updated>
    <id>http://abizern.org/2009/11/08/integrating-git-with-subethaedit-and-changes</id>
    <content type="html"><![CDATA[<p>A while ago, I read a
<a href="http://schinckel.net/2008/04/26/mercurial-with-os-x-gui-tools/">nice write up</a>
about using <a href="http://mercurial.selenic.com/">mercurial</a> with
<a href="http://www.codingmonkeys.de/subethaedit/">SubEthaEdit</a> and
<a href="http://connectedflow.com/changes/">Changes</a>. Here&#8217;s how to do the same thing
with <a href="http://git-scm.com/">git</a> instead of
<a href="http://mercurial.selenic.com/">mercurial</a>, separated into two parts in case you
just want to apply one set of changes.</p>

<h2>Changes Support</h2>

<p><strong>Step One: Make sure chdiff is installed.</strong></p>

<p>Open Changes.app and from the Changes menu select &#8220;Install terminal
utility&#8221;. This will install the chdiff utility which is used by the script.</p>

<p><strong>Step Two: Create a shell script to send diffs to Changes</strong></p>

<p>Create a shell script with the following contents.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>[ $# -eq 7 ] && /usr/bin/env chdiff "$2" "$5"</span></code></pre></td></tr></table></div></figure>


<p>Where you save this and what you call it is up to you. Mine is called
&#8216;.gitchanges&#8217;, saved it at the root of my home directory. Make sure the script
is executable.</p>

<p><strong>Step Three: Edit the .gitconfig file to use this script to handle diffs.</strong></p>

<p>Open your <code>~/.gitconfig</code> file. This should already exist, at the very least it
will contain you name and email. under the section called <code>[diff]</code> add the
location and name of the file.  You may have to edit this to make sure it points
to the name and location you chose in Step Two. (Make sure to use the correct
path in your setup)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[diff]
</span><span class='line'>external = &lt;path to file&gt;/.gitchanges</span></code></pre></td></tr></table></div></figure>


<h2>SubEthaEdit Support</h2>

<p><strong>Step One: Download and install the mode file for SubEthaEdit</strong></p>

<p>I wrote a SubEthaEdit mode for this which you can download from the
<a href="http://abizern.github.com/gitcommit.mode/">github project page</a>. Please feel
free to fork it and send me patches.</p>

<p><strong>Step Two: Edit the .gitconfig file to use SebEthaEdit as an external editor.</strong></p>

<p>Open your <code>~/.gitconfig</code> file. This time, under the <code>[core]</code> section, add the
following line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[core]
</span><span class='line'>editor = /usr/bin/see -w -r -o new-window -j 'git editor' -m gitCommit -g 1:0</span></code></pre></td></tr></table></div></figure>


<p>All those flags may seem daunting, but they are quite self-explanatory: the <code>-w</code>
flag makes the Terminal wait for a response from SubEthaEdit. <code>-r</code> brings
Terminal to the front after you&#8217;re done editing. <code>-o new-window</code> opens a new
window for editing. I prefer this to having a new tab appear in whatever window
I was working on. <code>-j 'git editor</code>&#8217; this sets the text that appears in the title
bar, which you can change as you wish. <code>-m gitCommit</code> is what sets the mode to
be used for editing. and <code>-g 1:0</code> puts the caret at the beginning of the file.</p>

<p>Now, when git asks you to write a commit message, or pick commits when running
<code>git rebase -i</code> a SubEthaEdit window will open as the commit message
editor. Make whatever changes you need then save the file (⌘-S) and then close
the window (⌘-W) for these changes to take effect.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSCoder Night London - Report]]></title>
    <link href="http://abizern.org/2009/09/25/nscoder-night-london-report/"/>
    <updated>2009-09-25T14:11:46+01:00</updated>
    <id>http://abizern.org/2009/09/25/nscoder-night-london-report</id>
    <content type="html"><![CDATA[<p><a href="http://www.flickr.com/photos/15729248@N00/3952499655"><img src="http://farm3.static.flickr.com/2671/3952499655_33ed3b7b29.jpg" alt="NSCoder Night" /></a></p>

<p>The first London NSCoder Night was a success!</p>

<p>Eleven people turned up, travelling from as far as Brighton and Reading to join
in the fun. There was a mix of indies, learners, small Mac shops and students.</p>

<p>We started off upstairs at the <a href="http://bunchofgrapesborough.com/">Bunch of Grapes</a> and then moved to the outside area for more room. The tables outside are at a comfortable height for standing around so people were able to move around to different groups. There was a food, drink and talk and the laptops came out a few times as well.</p>

<p>We decided that this is going to be a regular event, held at the same place on the <strong>third Tuesday of the month</strong>. Next time I&#8217;ll book a table upstairs so we can sit down more comfortably. You don&#8217;t need to tell me you&#8217;re coming, but I&#8217;d appreciate an idea of how many people are going to make it so I can reserve approximately the right number of seats.</p>

<p>Thanks everyone for coming out. It was a great night and I hope you all went home with as much enthusiasm for coding as I did.</p>

<p>So, until the next time; follow <a href="http://twitter.com/nscodernightlon">@NSCoderNightLon</a> on Twitter and subscribe to the <a href="http://tinyurl.com/m5g6jb">iCal calender</a> to stay up to date.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSCoder Night London]]></title>
    <link href="http://abizern.org/2009/09/21/nscoder-night-london/"/>
    <updated>2009-09-21T23:02:08+01:00</updated>
    <id>http://abizern.org/2009/09/21/nscoder-night-london</id>
    <content type="html"><![CDATA[<p>It&#8217;s surprising that there isn&#8217;t an <a href="http://nscodernight.com">NSCoder Night</a>
chapter in London. There is a monthly CocoaHeads meeting in Swindon, and the UK
Mac Dev meeting once a month in Central London, but I think that there is a gap
for an evening of coding in a social setting.</p>

<p>So, in the spirit of &#8220;If you build it, they will come&#8221; I&#8217;m going to try and get
this started. So, this Tuesday, September 22, from about 7, let&#8217;s get together
at the <a href="http://bunchofgrapesborough.com">Bunch of Grapes</a> pub just behind London
Bridge Station
<a href="http://maps.google.co.uk/maps?source=s_q&amp;hl=en&amp;geocode=&amp;q=bunch+of+grapes+borough&amp;sll=51.50722,-0.089006&amp;sspn=0.006357,0.016973&amp;ie=UTF8&amp;radius=0.36&amp;split=1&amp;filter=0&amp;rq=1&amp;ev=zi&amp;ll=51.507454,-0.088019&amp;spn=0.006691,0.016973&amp;z=16&amp;iwloc=A&amp;iwd=1&amp;cid=16443485918241557592&amp;dtab=2">map</a>. Bring
a laptop (charged) and you can either sit and code or just chat with anyone
else. You can work on what you want. You don&#8217;t have to show anyone what you&#8217;re
working on; but feel free to ask and answer questions.</p>

<p>But, this is still just an experiment. Don&#8217;t know whether it will be a weekly or
a monthly event. I&#8217;m not even sure about the location. I was there last week and
the WiFi was a little flaky. There was a party upstairs so it was busy, but
there was a high turnover (as you would expect for a pub near a train
station). I still managed to get a table. But, unless we try and get together,
we won&#8217;t be able to answer these questions.</p>

<p>So, Come along tomorrow night. Follow
<a href="http://twitter.com/nscodernightlon">@NSCoderNightLon</a> on Twitter and subscribe
to the <a href="http://tinyurl.com/m5g6jb">iCal calender</a> for future meetings.</p>

<p>See you there.</p>
]]></content>
  </entry>
  
</feed>
