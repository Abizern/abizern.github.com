<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Emacs on Abizer Nasir</title>
    <link>http://abizern.org/tags/emacs/</link>
    <description>Recent content in Emacs on Abizer Nasir</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Sun, 05 Jan 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://abizern.org/tags/emacs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hakyll New Post With Emacs</title>
      <link>http://abizern.org/2014/hakyll-new-post-with-emacs/</link>
      <pubDate>Sun, 05 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://abizern.org/2014/hakyll-new-post-with-emacs/</guid>
      <description>When this blog was created using Octopress, a new post could be created by simply running rake new_post in the Terminal. There is no such convenience in Hakyll, which is currently used as the generator. A small thing, but I wanted to fix it.
I could have created a similar Rake task, or shell script to do this, and there are even examples to be found on Hakyll&amp;rsquo;s site. But since I&amp;rsquo;m usually in Emacs when I want to write a new post, I thought it would be a good excuse to write a little lisp.</description>
    </item>
    
    <item>
      <title>Setting up for Lisp on OS X</title>
      <link>http://abizern.org/2013/setting-up-for-lisp-on-os-x/</link>
      <pubDate>Sun, 31 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://abizern.org/2013/setting-up-for-lisp-on-os-x/</guid>
      <description>This is how I roll, you might choose a different path.
 Install Emacs. Get a nice, modern pre-built binary from Emacs For Mac OS X. It even supports fullscreen mode
 Install Emacs Prelude which provides a useful, opinionated emacs environment which is easily configured.
 Install clisp. I use homebrew so brew install clisp takes care of that for me.
 Install quicklisp; from Terminal go to a temporary directory and download quicklisp.</description>
    </item>
    
    <item>
      <title>Commanding Your Text Editor</title>
      <link>http://abizern.org/2012/commanding-your-text-editor/</link>
      <pubDate>Fri, 02 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://abizern.org/2012/commanding-your-text-editor/</guid>
      <description>There&amp;rsquo;s a recent post up on the PeepCode Blog about Commanding Your Text Editor which has some handy tips for Emacs, Vim, Textmate, Sublime Text and the OS X. It&amp;rsquo;s a short read, and worth the time.
More and more of our time is spent at a keyboard typing, whether you&amp;rsquo;re a programmer or not. Those of you who know me will have heard me talking about the Dvorak keyboard layout and my current attraction to Emacs.</description>
    </item>
    
    <item>
      <title>A Reason To Learn Lisp</title>
      <link>http://abizern.org/2012/a-reason-to-learn-lisp/</link>
      <pubDate>Thu, 01 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://abizern.org/2012/a-reason-to-learn-lisp/</guid>
      <description>A short video from a live demo of Emacs from Web Rebels in Oslo 2012.
As the description says: &amp;ldquo;Crappy sound. Swearing. A noisy bar&amp;rdquo;, but an example of strong content overcoming presentation difficulties.
 </description>
    </item>
    
    <item>
      <title>Emacs Notes</title>
      <link>http://abizern.org/notes/emacs-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://abizern.org/notes/emacs-notes/</guid>
      <description>Installation Emacs brew install emacs --cocoa --srgb  .emacs.d These work for my dotfiles, based off Emacs Prelude, which should be cloned to ~/.emacs.d. There are no submodules in this repository.
Install with the customised script
curl -L https://github.com/Abizern/prelude/raw/master/utils/installer.sh | sh  General C-_, C-x u Undo, Cancel last command C-x, C-f Visit file C-x C-i Insert contents of file in buffer C-x C-s Save buffer C-x C-w Save buffer as&amp;hellip; &amp;lt;revert-file&amp;gt; Revert to last saved version C-x p Visit buffer under point C-f, C-j Turn off ido-mode in minibuffer M-; Comment active region (comment-dwim) M-/ Hippie expansion C-M-/ Completion on current word M-q Format text to paragraph C-x \ (align-regexp) C-c C-w Backward kill word S-return Smart open line below C-S-return Smart open line above C-g Quit command in the minibuffer C-u Prefix argument M-j Join the next line to this one</description>
    </item>
    
  </channel>
</rss>