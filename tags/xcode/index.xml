<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xcode on Abizer Nasir</title>
    <link>http://abizern.org/tags/xcode/</link>
    <description>Recent content in Xcode on Abizer Nasir</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Mon, 02 May 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://abizern.org/tags/xcode/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dependency Management With Carthage</title>
      <link>http://abizern.org/talks/2016/dependency-management-with-carthage/</link>
      <pubDate>Mon, 02 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://abizern.org/talks/2016/dependency-management-with-carthage/</guid>
      <description> Summary Almost a year since the last time I gave a talk on this subject at NSLondon. This is an updated version about Carthage.
Slides  The slides are available on Speaker Deck  Video  The video for this talk is available on Vimeo  </description>
    </item>
    
    <item>
      <title>Carthage</title>
      <link>http://abizern.org/talks/2015/carthage/</link>
      <pubDate>Thu, 30 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://abizern.org/talks/2015/carthage/</guid>
      <description>Summary My NSLondon talk about the Carthage Dependency Management System. No need to manage your own submodules or use CocoaPods, Carthage provides a simpler and more flexible method of adding framework dependencies to Xcode projects.
Slides These are available at SpeakerDeck</description>
    </item>
    
    <item>
      <title>Debug Logging In Swift</title>
      <link>http://abizern.org/2015/debug-logging-in-swift/</link>
      <pubDate>Sun, 01 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://abizern.org/2015/debug-logging-in-swift/</guid>
      <description>In the last iOSDevWeekly Dave Verwer listed Art Sabintsev&amp;rsquo;s PrintLnMagic - a small function that reproduces the common DLog pattern that many use which not only prints a value, but the filename, the function name and the line of the call. Which is really handy in debugging.
I use a version of Dlog myself, which has the added benefit of only outputting to the console when in Debug configurations, which PrintLnMagic does not do.</description>
    </item>
    
    <item>
      <title>Adding 3rd Party Code To Your Project</title>
      <link>http://abizern.org/talks/2014/adding-3rd-party-code-to-your-project/</link>
      <pubDate>Thu, 15 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://abizern.org/talks/2014/adding-3rd-party-code-to-your-project/</guid>
      <description>Summary This talk covers two ways of adding dependencies to an Xcode project; using Git Submodules or with CocoaPoads.
Slides These are available on SpeakerDeck
Video The video can be seen at SkillsMatter</description>
    </item>
    
    <item>
      <title>Missing Xcode Toolbar</title>
      <link>http://abizern.org/2013/missing-xcode-toolbar/</link>
      <pubDate>Tue, 29 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://abizern.org/2013/missing-xcode-toolbar/</guid>
      <description>I&amp;rsquo;m sure you&amp;rsquo;ve been there.
You&amp;rsquo;re working in Xcode, and you have a file opened on another monitor in another window. Unfortunately, you forget about it, and when you close your project and reopen it again, the toolbar is missing.
It can be frustrating, because Xcode remembers this, and every time you open the project it will open without a toolbar. You can put it back by right-clicking in what is left of the toolbar and choosing one of the options.</description>
    </item>
    
    <item>
      <title>Correcting Brace Layout</title>
      <link>http://abizern.org/2012/correcting-brace-layout/</link>
      <pubDate>Sun, 30 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>http://abizern.org/2012/correcting-brace-layout/</guid>
      <description>I wrote a small rubygem called fixbraces to move the opening brace of a conditional to the same line as the opening statement.
So now I can correct all the Xcode generated stubs that look like:
- (void)someMethod { // some code here }  Into my preferred format:
- (void)someMethod { // some code here }  Which fits with my personal coding standards.</description>
    </item>
    
    <item>
      <title>Simple Localisation Testing</title>
      <link>http://abizern.org/2012/simple-localisation-testing/</link>
      <pubDate>Sun, 18 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>http://abizern.org/2012/simple-localisation-testing/</guid>
      <description>Sometimes you want to test your localisations but you don&amp;rsquo;t want to go through the hassle of changing the settings on the simulator, or device, or your Mac for each one. There&amp;rsquo;s always the fear of setting some language that you don&amp;rsquo;t understand.
But, with Xcode4 schemes and a little argument passing this is a lot easier than it used to be. You can set up a scheme for each localisation which will let you run your iOS or Mac app under that localisation without having to change any settings.</description>
    </item>
    
    <item>
      <title>Renaming an Xcode Project</title>
      <link>http://abizern.org/2010/renaming-an-xcode-project/</link>
      <pubDate>Sat, 06 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>http://abizern.org/2010/renaming-an-xcode-project/</guid>
      <description>You may have occasion to rename an Xcode project.
You can find step-by-step instructions and scripts with a little bit of Googling. But there is another way. If you&amp;rsquo;re running Xcode 3.2 on Snow Leopard there is a menu item you can use instead. Have a look at the Project &amp;gt; Renameâ€¦ menu item instead.</description>
    </item>
    
    <item>
      <title>Some Tips for Lazy Xcoders</title>
      <link>http://abizern.org/2009/some-tips-for-lazy-xcoders/</link>
      <pubDate>Wed, 11 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>http://abizern.org/2009/some-tips-for-lazy-xcoders/</guid>
      <description>We all know what we should be doing when writing code. Each methodology you choose to use has it&amp;rsquo;s own best practices, whether it&amp;rsquo;s working from full specifications, writing unit tests first, programming in pairs, yadda, yadda. But, as developers, we&amp;rsquo;re only human, and we&amp;rsquo;re lazy. We have tools to make things easy for us. Here are a few tips that you can use to help when you&amp;rsquo;re not as rigorous in your coding as you should be.</description>
    </item>
    
  </channel>
</rss>