<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift on Abizer Nasir</title>
    <link>http://abizern.org/tags/swift/</link>
    <description>Recent content in Swift on Abizer Nasir</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Tue, 25 Oct 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://abizern.org/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Safer Programming With Types</title>
      <link>http://abizern.org/talks/2016/safer-programming-with-types/</link>
      <pubDate>Tue, 25 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://abizern.org/talks/2016/safer-programming-with-types/</guid>
      <description> Summary A presented a lightning talk at Swift London with a simple example of how using strong types can lead to safer programs.
Slides  Available on Speaker Deck with speaker notes included.  </description>
    </item>
    
    <item>
      <title>Core Data It&#39;s Not Dead Yet</title>
      <link>http://abizern.org/talks/2016/core-data-its-not-dead-yet/</link>
      <pubDate>Fri, 23 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://abizern.org/talks/2016/core-data-its-not-dead-yet/</guid>
      <description> Summary I spoke at FrenchKit Conference in Paris on why Core Data should not be counted out just yet.
Slides  Available on Speaker Deck  Video  The video is available from Xebia&amp;rsquo;s YouTube Channel.  </description>
    </item>
    
    <item>
      <title>Being Imperfect In A Perfect World</title>
      <link>http://abizern.org/talks/2016/being-imperfect-in-a-perfect-world/</link>
      <pubDate>Wed, 21 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://abizern.org/talks/2016/being-imperfect-in-a-perfect-world/</guid>
      <description> Summary Just some thoughts on the choices we make about the patterns we use in development.
Slides  Available on Speaker Deck  </description>
    </item>
    
    <item>
      <title>Swift London Pre-WWDC Panel</title>
      <link>http://abizern.org/talks/2016/swift-london-pre-wwdc-panel/</link>
      <pubDate>Tue, 07 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://abizern.org/talks/2016/swift-london-pre-wwdc-panel/</guid>
      <description> Summary I was a late addition to this panel, which is my excuse for looking so scruffy.
Video  The video is available on the Swift London YouTube Channel  </description>
    </item>
    
    <item>
      <title>Swift Function Overloading By Return Type</title>
      <link>http://abizern.org/2015/swift-function-overloading-by-return-type/</link>
      <pubDate>Sun, 11 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://abizern.org/2015/swift-function-overloading-by-return-type/</guid>
      <description>As Objective-C developers, we often forget that we can overload functions by return type. This can often help us create neat APIs. This is best illustrated by an example.
I posted a wrapper for timer dispatch sources yesterday. While I was doing it I noticed a discrepancy with GCD. When creating a timer dispatch source, times were passed as nanoseconds as a UInt64, but the dispatch_after() function took nanoseconds as an Int64.</description>
    </item>
    
    <item>
      <title>A Swift Repeating Timer</title>
      <link>http://abizern.org/2015/a-swift-repeating-timer/</link>
      <pubDate>Sat, 10 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://abizern.org/2015/a-swift-repeating-timer/</guid>
      <description>We frequently (excuse the pun) need to schedule a repeated action.
The way to do this was usually to use NSTimer&amp;rsquo;s scheduledTimerWithTimeInterval(_:,target:,selector:,userInfo:,repeats:), which needed a callback, and had the hidden pitfall of the target being strongly referenced by the runloop that this timer was scheduled on. There are extensions to NSTimer that allow the used of blocks instead (I even wrote one myself), but there is another way.
Grand Central Dispatch provides dispatch sources for efficient interaction with the underlying system.</description>
    </item>
    
    <item>
      <title>What Haskell Teaches Me About Writing Swift</title>
      <link>http://abizern.org/talks/2015/what-haskell-teaches-me-about-writing-swift/</link>
      <pubDate>Thu, 11 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://abizern.org/talks/2015/what-haskell-teaches-me-about-writing-swift/</guid>
      <description>Summary I had a chance to present a longer version of my Swift Summit Lightning Talk at AltConf 2015 in San Francisco.
Just some personal thoughts on what knowing some Haskell teaches me about writing Swift code.
Slides  The PDF Slides can be downloaded directly. View the slides on SpeakerDeck  Video  Available on the Realm Altconf site  References Here are the links to the references mentioned in my talk</description>
    </item>
    
    <item>
      <title>What Haskell Taught Me About Swift</title>
      <link>http://abizern.org/talks/2015/what-haskell-taught-me-about-swift/</link>
      <pubDate>Sat, 21 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://abizern.org/talks/2015/what-haskell-taught-me-about-swift/</guid>
      <description> Summary I did a short talk at Swift Summit in London about a couple of things that knowing Haskell has helped me when writing Swift.
Video A video of the talk, with synchronised slides can be seen at:
 Realm.io  Slides  Download the PDF directly from here View the slides on SpeakerDeck  </description>
    </item>
    
    <item>
      <title>Debug Logging In Swift</title>
      <link>http://abizern.org/2015/debug-logging-in-swift/</link>
      <pubDate>Sun, 01 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://abizern.org/2015/debug-logging-in-swift/</guid>
      <description>In the last iOSDevWeekly Dave Verwer listed Art Sabintsev&amp;rsquo;s PrintLnMagic - a small function that reproduces the common DLog pattern that many use which not only prints a value, but the filename, the function name and the line of the call. Which is really handy in debugging.
I use a version of Dlog myself, which has the added benefit of only outputting to the console when in Debug configurations, which PrintLnMagic does not do.</description>
    </item>
    
    <item>
      <title>Fizz Buzz in Swift</title>
      <link>http://abizern.org/2014/fizz-buzz-in-swift/</link>
      <pubDate>Sat, 13 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://abizern.org/2014/fizz-buzz-in-swift/</guid>
      <description>In August 2014 I gave a talk at NSLondon about various approaches to solving Fizz Buzz in Swift. The video is available on Vimeo and proved to be reasonably popular and even gained me my first mention in iOS Dev Weekly.
Just to make this more complete here is a link to the slides and a Swift Playground that you can use to play around with the examples.
http://downloads.abizern.org/FizzBuzzery.zip
Have fun!</description>
    </item>
    
    <item>
      <title>FizzBuzz In Swift</title>
      <link>http://abizern.org/talks/2014/fizzbuzz-in-swift/</link>
      <pubDate>Thu, 28 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://abizern.org/talks/2014/fizzbuzz-in-swift/</guid>
      <description>Summary My NSLondon talk about the various approaches to the FizzBuzz problem in Swift, plus some thoughts on the new Language. My first mention in iOS Dev Weekly
Slides  The slides as a PDF file can be downloaded from here. You can see the slides on SpeakerDeck.  Combined Download  A zip file containing the slides and the playground is available here.  Video The video of the talk can be seen at:</description>
    </item>
    
  </channel>
</rss>