<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS Development | Abizer Nasir]]></title>
  <link href="http://abizern.org/categories/ios-development/atom.xml" rel="self"/>
  <link href="http://abizern.org/"/>
  <updated>2012-10-31T10:14:39+00:00</updated>
  <id>http://abizern.org/</id>
  <author>
    <name><![CDATA[Abizer Nasir]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UUID Strings with Cocoa]]></title>
    <link href="http://abizern.org/2012/10/25/uuid-strings-with-cocoa/"/>
    <updated>2012-10-25T11:52:00+01:00</updated>
    <id>http://abizern.org/2012/10/25/uuid-strings-with-cocoa</id>
    <content type="html"><![CDATA[<p>This used to be a thing until the iOS 6 and OS X 10.8 compatible
<a href="http://developer.apple.com/library/mac/#documentation/Foundation/Reference/NSUUID_Class/Reference/Reference.html">NSUUID Class</a>
became available.</p>

<!-- more -->


<h2>New</h2>

<p>This is how you can do it now:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>UUID from NSUUID  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">uuidString</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSUUID</span> <span class="n">UUID</span><span class="p">]</span> <span class="n">UUIDString</span><span class="p">];</span>
</span><span class='line'><span class="c1">// Generates: 7E60066C-C7F3-438A-95B1-DDE8634E1072</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Old</h2>

<p>Here's a method you can put in a class, with the correct ARC casts on ownership, that
returns a UUID. It's a fairly common technique, and you'll even see versions of
it where people have created a category on NSString for this.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>UUID from a method   </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">uuidString</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// Returns a UUID</span>
</span><span class='line'>
</span><span class='line'><span class="n">CFUUIDRef</span> <span class="n">uuid</span> <span class="o">=</span> <span class="n">CFUUIDCreate</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">);</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">uuidStr</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge_transfer</span> <span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">CFUUIDCreateString</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span> <span class="n">uuid</span><span class="p">);</span>
</span><span class='line'><span class="n">CFRelease</span><span class="p">(</span><span class="n">uuid</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">uuidStr</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And to use it:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>UUID from a method usage  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">uuidString</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">uuidString</span><span class="p">];</span>
</span><span class='line'><span class="c1">// Generates D5CB0560-206F-4581-AA25-1D6A873F3526</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>NSProcessInfo</h2>

<p>A common use for unique strings is to name files and directories
within a program so that they do not clash. Since iOS 2 and OS X 10.0 there has
been the <code>globallyUniqueString</code> method in
<a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSProcessInfo_Class/Reference/Reference.html">NSProcessInfo</a>
which returns a string that is unique for the network and process. So, for a
<em>good enough</em> unique string this is probably a better method to use:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Unique String from NSProcessInfo  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">uuidStr</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSProcessInfo</span> <span class="n">processInfo</span><span class="p">]</span> <span class="n">globallyUniqueString</span><span class="p">];</span>
</span><span class='line'><span class="c1">// generates 56341C6E-35A7-4C97-9C5E-7AC79673EAB2-539-000001F95B327819</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coding Conventions]]></title>
    <link href="http://abizern.org/2012/07/01/coding-conventions/"/>
    <updated>2012-07-01T11:32:00+01:00</updated>
    <id>http://abizern.org/2012/07/01/coding-conventions</id>
    <content type="html"><![CDATA[<p>I've just published my
<a href="/cocoa-coding-conventions">Cocoa Coding Conventions</a>.</p>

<!-- more -->


<p>Not so that it can be followed, but to provide an idea of what can be done so
that others can write their own, just as I've based mine on published
conventions.</p>

<p>The idea isn't to create a rod for your back when writing code, but to put some
thought into the choices that are made when writing code so that it is consistent.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Localisation Testing]]></title>
    <link href="http://abizern.org/2012/03/18/simple-localisation-testing/"/>
    <updated>2012-03-18T08:44:00+00:00</updated>
    <id>http://abizern.org/2012/03/18/simple-localisation-testing</id>
    <content type="html"><![CDATA[<p>Sometimes you want to test your localisations but you don't want to go through the hassle of
changing the settings on the simulator, or device, or your Mac for each one. There's always the fear
of setting some language that you don't understand.</p>

<p>But, with Xcode4 schemes and a little argument passing this is a lot easier than it used to be. You
can set up a scheme for each localisation which will let you run your iOS or Mac app under that
localisation without having to change any settings.</p>

<!-- more -->


<p>Just to make it easier, you can have a look at an example Xcode Workspace that I've
<a href="https://github.com/Abizern/SimpleLocalisationTesting" title="Simple Localisation
Testing">put up on Github</a>. This has two projects within it, one for the Mac and one for the iPhone.</p>

<p><img src="http://images.abizern.org/2012/03/Schemes.png" width="631" height="111" title="Xcode Schemes" ></p>

<p>Start by having a look at the schemes. There are two projects with two schemes each, one for each
localisation. Handily named so you can tell which is for which.</p>

<p><img class="top" src="http://images.abizern.org/2012/03/RunAction_en.png" width="525" height="135" title="en run action" ></p>

<p><img class="top" src="http://images.abizern.org/2012/03/RunAction_es.png" width="525" height="133" title="en run action" ></p>

<p>If you have a a look at the run action for these schemes you can see the arguments that I am
passing. First the <code>-AppleLanguages</code> argument and then the two character country code (with the
brackets back-slash escaped).</p>

<p>That's all there is to it. Now you just have to pick the scheme to run and it will load up that
localisation without you having to change it on the simulator. It even works for running debug
builds on the device.</p>

<p>Of course, you should test it properly eventually, but while you are developing, it's a quick way to
get feedback about how your localisations appear.</p>
]]></content>
  </entry>
  
</feed>
