<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mac Development | Abizer Nasir]]></title>
  <link href="http://abizern.org/categories/mac-development/atom.xml" rel="self"/>
  <link href="http://abizern.org/"/>
  <updated>2012-03-18T10:01:11+00:00</updated>
  <id>http://abizern.org/</id>
  <author>
    <name><![CDATA[Abizer Nasir]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Simple Localisation Testing]]></title>
    <link href="http://abizern.org/2012/03/18/simple-localisation-testing/"/>
    <updated>2012-03-18T08:44:00+00:00</updated>
    <id>http://abizern.org/2012/03/18/simple-localisation-testing</id>
    <content type="html"><![CDATA[<p>Sometimes you want to test your localisations but you don't want to go through the hassle of
changing the settings on the simulator, or device, or your Mac for each one. There's always the fear
of setting some language that you don't understand.</p>

<p>But, with Xcode4 schemes and a little argument passing this is a lot easier than it used to be. You
can set up a scheme for each localisation which will let you run your iOS or Mac app under that
localisation without having to change any settings.</p>

<!-- more -->


<p>Just to make it easier, you can have a look at an example Xcode Workspace that I've
<a href="https://github.com/Abizern/SimpleLocalisationTesting" title="Simple Localisation
Testing">put up on Github</a>. This has two projects within it, one for the Mac and one for the iPhone.</p>

<p><img src="http://images.abizern.org/2012/03/Schemes.png" width="631" height="111" title="Xcode Schemes" ></p>

<p>Start by having a look at the schemes. There are two projects with two schemes each, one for each
localisation. Handily named so you can tell which is for which.</p>

<p><img class="top" src="http://images.abizern.org/2012/03/RunAction_en.png" width="525" height="135" title="en run action" ></p>

<p><img class="top" src="http://images.abizern.org/2012/03/RunAction_es.png" width="525" height="133" title="en run action" ></p>

<p>If you have a a look at the run action for these schemes you can see the arguments that I am
passing. First the <code>-AppleLanguages</code> argument and then the two character country code (with the
brackets back-slash escaped).</p>

<p>That's all there is to it. Now you just have to pick the scheme to run and it will load up that
localisation without you having to change it on the simulator. It even works for running debug
builds on the device.</p>

<p>Of course, you should test it properly eventually, but while you are developing, it's a quick way to
get feedback about how your localisations appear.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just Enough GPG for git]]></title>
    <link href="http://abizern.org/2011/01/17/just-enough-gpg-for-git/"/>
    <updated>2011-01-17T15:52:38+00:00</updated>
    <id>http://abizern.org/2011/01/17/just-enough-gpg-for-git</id>
    <content type="html"><![CDATA[<p>It came about that I wanted to do some work with git and signed tags. It's been
a while since I had looked at this, I've got some old entries up on keyservers
that date back to 1999, and never on a Mac.</p>

<p>It turns out that it is quite simple to set up a minimal
<a href="http://en.wikipedia.org/wiki/Pretty_Good_Privacy">GPG</a> environment – one that
lets you work on the command line without having to set it up for Mail.app. This
is about all I need it for.</p>

<!-- more  -->


<p>The <a href="http://www.gpgtools.org/index.html">GPGTools project</a> has recently
resurrected the <a href="http://macgpg.sourceforge.net/">MacGPG project</a> to provide
email encryption and tools to the Mac. It is still in development, and I didn't
want to mess about with my Mail installation so rather than install the complete
set of tools, I chose to install <a href="http://www.gpgtools.org/macgpg2.html">MacGPG2</a>
and <a href="http://www.gpgtools.org/keychain.html">GPGKeychain Access</a></p>

<p><a href="http://www.gpgtools.org/macgpg2.html">MacGPG2</a> is the
<a href="http://en.wikipedia.org/wiki/Pretty_Good_Privacy#OpenPGP">OpenPGP</a>
implementation for the Mac. This installs gpg2 into /usr/local/bin and gpg is
symlinked to gpg2. I only mention this because although the commands can all be
issued as gpg, you get to the documentation by using man gpg2, not man
gpg. Installation is through an installer package.</p>

<p><a href="http://www.gpgtools.org/keychain.html">GPGKeychain Access</a> does not integrate
with the Mac Keychain as the name might suggest, but provides a window to look
at and manage the keys that you have on your system. These are usually under
~/.gnupg/ Run the installer, and create your keys. It's quite simple and there
is a video on the project page. However, there are a couple of things that you
should keep in mind. If you forget your passphrase you can't use your private
key anymore. And if you've published the key, you won't be able to revoke it and
it will just sit around on keyservers. So, set an expiry date on your keys in
case you do lose the private key or passphrase. As the expiry date comes up just
extend it again.</p>

<p>There is no key-server configured. There seems to be a ticket for this to be
implemented in some future milestone. Until then, create a file called gpg.conf
under ~/.gnupg and put this line in it:</p>

<pre><code>keyserver hkp://pgp.mit.edu
</code></pre>

<p>And that is just enough so that when you use the menu items that send and get
keys from keyservers they will work. As far as I know, these servers talk to
each other, so writing to one makes the key visible on the others.</p>

<p>Synchronisation of keys is an issue. If you are adventurous you could add more
entries to the gpg.conf file to use a central location for the keyrings,
somewhere like Dropbox or iDisk, so that all your machines can use the same
files. But, it's just as easy to export the keys as text and use those files to
keep different machines in sync. Partcularly if you will be using gpg rarely.</p>

<p>This has been a companion piece to the non-Mac centric
<a href="http://365git.tumblr.com/">365Git</a> post about
<a href="http://365git.tumblr.com/post/2796779828/signing-a-git-tag">signed tags</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Renaming an Xcode Project]]></title>
    <link href="http://abizern.org/2010/03/06/renaming-an-xcode-project/"/>
    <updated>2010-03-06T16:48:19+00:00</updated>
    <id>http://abizern.org/2010/03/06/renaming-an-xcode-project</id>
    <content type="html"><![CDATA[<p>You may have occasion to rename an Xcode project.</p>

<p>You can find step-by-step instructions and scripts with a little bit of
Googling. But there is another way. If you're running Xcode 3.2 on Snow Leopard
there is a menu item you can use instead. Have a look at the Project > Rename…
menu item instead.</p>

<p><img src="http://images.abizern.org.s3.amazonaws.com/2010/03/XcodeRename.png" alt="Project &gt; Rename…" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Year Of Objective-C Snippets ]]></title>
    <link href="http://abizern.org/2010/02/27/a-year-of-objective-c-snippets/"/>
    <updated>2010-02-27T17:20:29+00:00</updated>
    <id>http://abizern.org/2010/02/27/a-year-of-objective-c-snippets</id>
    <content type="html"><![CDATA[<p>Pieter Omvlee of <a href="http://www.bohemiancoding.com/">Bohemian Coding</a> has been
inspired to post a snippet of Objective-C/Cocoa code every day for a year.</p>

<p>It’s a great idea and starts with a useful category on NSArray. Go and see what
you can learn over at
<a href="http://365cocoa.tumblr.com/">http://365cocoa.tumblr.com/</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some tips for lazy Xcoders]]></title>
    <link href="http://abizern.org/2009/11/11/some-tips-for-lazy-xcoders/"/>
    <updated>2009-11-11T12:40:53+00:00</updated>
    <id>http://abizern.org/2009/11/11/some-tips-for-lazy-xcoders</id>
    <content type="html"><![CDATA[<p>We all know what we should be doing when writing code. Each methodology you
choose to use has it's own best practices, whether it's working from full
specifications, writing unit tests first, programming in pairs, yadda,
yadda. But, as developers, we're only human, and we're lazy. We have tools to
make things easy for us. Here are a few tips that you can use to help when
you're not as rigorous in your coding as you should be.</p>

<h2>Use the static analyser.</h2>

<p>You can use the
<a href="http://arstechnica.com/apple/reviews/2009/08/mac-os-x-10-6.ars/9#compilers">Clang Static Analyser</a>
in Xcode by setting a build option. This will find a whole host of errors in
your code, even down to unconventionally named functions.</p>

<p><img src="http://images.abizern.org.s3.amazonaws.com/2009/11/ClangBuildSetting.png" alt="ClangBuildSetting.png" /></p>

<p>Now you can just code away and have the compiler pick up your mistakes when you
run 'Build and Analyze' (⌘+Shift+A).</p>

<h2>Find your mistakes quickly.</h2>

<p>Any real application you develop will have a large number of resources that need
to be copied to your application bundle. The default projects that Xcode create
for you will copy these files first before compiling.</p>

<p><img src="http://images.abizern.org.s3.amazonaws.com/2009/11/XcodeDefault.png" alt="XcodeDefault.png" /></p>

<p>But, the lazy Xcoder knows that there are probably errors in the code that need
to get flagged by the compiler, so this copying is a waste of time. Reorder the
build steps by dragging so that the compilation is done first.</p>

<p><img src="http://images.abizern.org.s3.amazonaws.com/2009/11/XcodeRecommended.png" alt="XcodeRecommended.png" /></p>

<p>Your builds will now break early (and often!).</p>

<h2>Don't fear the version controller.</h2>

<p>I'm going to stick my neck out and say that if you're not using version control
you're an idiot. The lazy Xcoder uses a powerful system that lets him or her
branch easily, make lots of little changes, and lots of mistakes (that can be
backed out). These changes can then be bundled into larger commits to be merged
into the main branch so that your co-workers don't see what an idiot you've
been.</p>

<p>One such version control system is <a href="http://git-scm.com/">git</a>. The lazy Xcoder
writes a bit of code, checks it in out of habit and then compiles. The compiler
picks up the mistakes, and he or she fixes them. Rather than make a new commit,
and retype the commit message, just call:</p>

<p><code>bash
git commit --amend -a -C HEAD
</code></p>

<p>This will bring up the previous commit message in the editor, which you can
amend if you wish. This new commit will replace the previous one. The <code>-a</code>
option means you don't even need to do a git add and the <code>-C HEAD</code> option means
it will use the commit message from the last commit.</p>

<p>Of course, if you're a rockstar programmer, you don't make mistakes at this
level. But I'm not, and I prefer to work with human nature rather than against
it.</p>
]]></content>
  </entry>
  
</feed>
