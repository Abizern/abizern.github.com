<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mac Development | Abizer Nasir]]></title>
  <link href="http://abizern.org/categories/mac-development/atom.xml" rel="self"/>
  <link href="http://abizern.org/"/>
  <updated>2012-07-01T17:54:15+01:00</updated>
  <id>http://abizern.org/</id>
  <author>
    <name><![CDATA[Abizer Nasir]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Coding Conventions]]></title>
    <link href="http://abizern.org/2012/07/01/coding-conventions/"/>
    <updated>2012-07-01T11:32:00+01:00</updated>
    <id>http://abizern.org/2012/07/01/coding-conventions</id>
    <content type="html"><![CDATA[<p>I've just published my
<a href="/cocoa-coding-conventions">Cocoa Coding Conventions</a>.</p>

<!-- more -->


<p>Not so that it can be followed, but to provide an idea of what can be done so
that others can write their own, just as I've based mine on published
conventions.</p>

<p>The idea isn't to create a rod for your back when writing code, but to put some
thought into the choices that are made when writing code so that it is consistent.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Localisation Testing]]></title>
    <link href="http://abizern.org/2012/03/18/simple-localisation-testing/"/>
    <updated>2012-03-18T08:44:00+00:00</updated>
    <id>http://abizern.org/2012/03/18/simple-localisation-testing</id>
    <content type="html"><![CDATA[<p>Sometimes you want to test your localisations but you don't want to go through the hassle of
changing the settings on the simulator, or device, or your Mac for each one. There's always the fear
of setting some language that you don't understand.</p>

<p>But, with Xcode4 schemes and a little argument passing this is a lot easier than it used to be. You
can set up a scheme for each localisation which will let you run your iOS or Mac app under that
localisation without having to change any settings.</p>

<!-- more -->


<p>Just to make it easier, you can have a look at an example Xcode Workspace that I've
<a href="https://github.com/Abizern/SimpleLocalisationTesting" title="Simple Localisation
Testing">put up on Github</a>. This has two projects within it, one for the Mac and one for the iPhone.</p>

<p><img src="http://images.abizern.org/2012/03/Schemes.png" width="631" height="111" title="Xcode Schemes" ></p>

<p>Start by having a look at the schemes. There are two projects with two schemes each, one for each
localisation. Handily named so you can tell which is for which.</p>

<p><img class="top" src="http://images.abizern.org/2012/03/RunAction_en.png" width="525" height="135" title="en run action" ></p>

<p><img class="top" src="http://images.abizern.org/2012/03/RunAction_es.png" width="525" height="133" title="en run action" ></p>

<p>If you have a a look at the run action for these schemes you can see the arguments that I am
passing. First the <code>-AppleLanguages</code> argument and then the two character country code (with the
brackets back-slash escaped).</p>

<p>That's all there is to it. Now you just have to pick the scheme to run and it will load up that
localisation without you having to change it on the simulator. It even works for running debug
builds on the device.</p>

<p>Of course, you should test it properly eventually, but while you are developing, it's a quick way to
get feedback about how your localisations appear.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just Enough GPG for git]]></title>
    <link href="http://abizern.org/2011/01/17/just-enough-gpg-for-git/"/>
    <updated>2011-01-17T15:52:38+00:00</updated>
    <id>http://abizern.org/2011/01/17/just-enough-gpg-for-git</id>
    <content type="html"><![CDATA[<p>It came about that I wanted to do some work with git and signed tags. It's been
a while since I had looked at this, I've got some old entries up on keyservers
that date back to 1999, and never on a Mac.</p>

<p>It turns out that it is quite simple to set up a minimal
<a href="http://en.wikipedia.org/wiki/Pretty_Good_Privacy">GPG</a> environment – one that
lets you work on the command line without having to set it up for Mail.app. This
is about all I need it for.</p>

<!-- more  -->


<p>The <a href="http://www.gpgtools.org/index.html">GPGTools project</a> has recently
resurrected the <a href="http://macgpg.sourceforge.net/">MacGPG project</a> to provide
email encryption and tools to the Mac. It is still in development, and I didn't
want to mess about with my Mail installation so rather than install the complete
set of tools, I chose to install <a href="http://www.gpgtools.org/macgpg2.html">MacGPG2</a>
and <a href="http://www.gpgtools.org/keychain.html">GPGKeychain Access</a></p>

<p><a href="http://www.gpgtools.org/macgpg2.html">MacGPG2</a> is the
<a href="http://en.wikipedia.org/wiki/Pretty_Good_Privacy#OpenPGP">OpenPGP</a>
implementation for the Mac. This installs gpg2 into /usr/local/bin and gpg is
symlinked to gpg2. I only mention this because although the commands can all be
issued as gpg, you get to the documentation by using man gpg2, not man
gpg. Installation is through an installer package.</p>

<p><a href="http://www.gpgtools.org/keychain.html">GPGKeychain Access</a> does not integrate
with the Mac Keychain as the name might suggest, but provides a window to look
at and manage the keys that you have on your system. These are usually under
~/.gnupg/ Run the installer, and create your keys. It's quite simple and there
is a video on the project page. However, there are a couple of things that you
should keep in mind. If you forget your passphrase you can't use your private
key anymore. And if you've published the key, you won't be able to revoke it and
it will just sit around on keyservers. So, set an expiry date on your keys in
case you do lose the private key or passphrase. As the expiry date comes up just
extend it again.</p>

<p>There is no key-server configured. There seems to be a ticket for this to be
implemented in some future milestone. Until then, create a file called gpg.conf
under ~/.gnupg and put this line in it:</p>

<pre><code>keyserver hkp://pgp.mit.edu
</code></pre>

<p>And that is just enough so that when you use the menu items that send and get
keys from keyservers they will work. As far as I know, these servers talk to
each other, so writing to one makes the key visible on the others.</p>

<p>Synchronisation of keys is an issue. If you are adventurous you could add more
entries to the gpg.conf file to use a central location for the keyrings,
somewhere like Dropbox or iDisk, so that all your machines can use the same
files. But, it's just as easy to export the keys as text and use those files to
keep different machines in sync. Partcularly if you will be using gpg rarely.</p>

<p>This has been a companion piece to the non-Mac centric
<a href="http://365git.tumblr.com/">365Git</a> post about
<a href="http://365git.tumblr.com/post/2796779828/signing-a-git-tag">signed tags</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Renaming an Xcode Project]]></title>
    <link href="http://abizern.org/2010/03/06/renaming-an-xcode-project/"/>
    <updated>2010-03-06T16:48:19+00:00</updated>
    <id>http://abizern.org/2010/03/06/renaming-an-xcode-project</id>
    <content type="html"><![CDATA[<p>You may have occasion to rename an Xcode project.</p>

<p>You can find step-by-step instructions and scripts with a little bit of
Googling. But there is another way. If you're running Xcode 3.2 on Snow Leopard
there is a menu item you can use instead. Have a look at the Project > Rename…
menu item instead.</p>

<p><img src="http://images.abizern.org.s3.amazonaws.com/2010/03/XcodeRename.png" alt="Project &gt; Rename…" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Year Of Objective-C Snippets ]]></title>
    <link href="http://abizern.org/2010/02/27/a-year-of-objective-c-snippets/"/>
    <updated>2010-02-27T17:20:29+00:00</updated>
    <id>http://abizern.org/2010/02/27/a-year-of-objective-c-snippets</id>
    <content type="html"><![CDATA[<p>Pieter Omvlee of <a href="http://www.bohemiancoding.com/">Bohemian Coding</a> has been
inspired to post a snippet of Objective-C/Cocoa code every day for a year.</p>

<p>It’s a great idea and starts with a useful category on NSArray. Go and see what
you can learn over at
<a href="http://365cocoa.tumblr.com/">http://365cocoa.tumblr.com/</a>.</p>
]]></content>
  </entry>
  
</feed>
