<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Haskell | Abizer Nasir]]></title>
  <link href="http://abizern.org/categories/haskell/atom.xml" rel="self"/>
  <link href="http://abizern.org/"/>
  <updated>2012-04-15T20:15:29+01:00</updated>
  <id>http://abizern.org/</id>
  <author>
    <name><![CDATA[Abizer Nasir]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rotate a String with Haskell]]></title>
    <link href="http://abizern.org/2012/04/15/rotate-a-string-with-haskell/"/>
    <updated>2012-04-15T15:08:00+01:00</updated>
    <id>http://abizern.org/2012/04/15/rotate-a-string-with-haskell</id>
    <content type="html"><![CDATA[<p>I qualified for <a href="http://code.google.com/codejam">Google Code Jam</a> this year
answering 3 out of 4 questions. I have no illusions about progressing very far,
but I'm using it as an excuse to learn some Haskell and to write code faster.</p>

<p>As part of the learning process, I took one of my correct solutions over to the
nice folks at the #haskell channel over on freenode and asked if there was a
better way to do it. I learned something surprising.</p>

<!-- more -->


<p>As part of the solution to the
<a href="http://code.google.com/codejam/contest/1460488/dashboard#s=p2">Recycled Numbers</a>
problem required turning a number such as 1234 into a list of numbers with the
digits rotated [4123, 3412, 2341]. User TSC2 in the channel gave me this simple
way of doing it:</p>

<p><code>bash ghci console
ghci&gt; (\xs -&gt; let n = length xs in (tail . take n . map (take n) . tails . cycle) xs) "abcde"
["bcdea","cdeab","deabc","eabcd"]
</code></p>

<p>I'm still new to this so I had to work it out on paper, but here is a step by
step explanation of what is happening: working from right to left as the
functions are evaluated:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>xs </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"abcde"</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>xs</code> is just the input string.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>cycle </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"abcdeabcde..."</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>cycle</code> creates an infinite list out of the input list by repeating it. Haskell
is lazy. It doesn't actually create the list until it actually needs it, so I've
added the ellpises just to show the concept that this is repeated infinitely.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>tails </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>["abcdeabcde...", "bcdeabcdea...", "cdeabcdeab...", "deabcdeabc...", ...]</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This is where things start to get interesting. <code>tails</code> creates a list out of
successive tails of a list. If you were to do this on a finite list you'd get a
list of smaller and smaller elements. For example:</p>

<p><code>bash ghci console
ghci&gt; tails "abcde"
["abcde","bcde","cde","de","e",""]
</code></p>

<p>But since our input is an infinite we now have an infinite list of infinite
lists, each element starting at one letter in from the original list. Remember,
this hasn't actually been worked out yet.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>map (take n) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>["abcde", "bcdea", "cdeab", "deabc", "eabcd" "abcde", ...]</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>take n</code> takes the first <code>n</code> elemets of a list. Our lambda expression defines
this as the length of the list, which is 5. And <code>map</code> applies this to each
element of the list. So now we have an infinite list of 5 element lists. which is
closer to our required final output.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>take n </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>["abcde", "bcdea", "cdeab", "deabc", "eabcd"]</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Applying <code>take n</code> again to the infinite list takes the first 5 elements of the
finite list</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>tail </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>["bcdea", "cdeab", "deabc", "eabcd"]</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Applying <code>tail</code> to the finite list takes all but the first element, and we get
the output that we were looking for. Even though along the way we had an
infinite list of infinite lists.</p>

<p>And yet all Haskell did was provide a promise (a <em>thunk</em> in functional terms)
that it would provide the answer when it was asked for, and as the function
progressed the infinite list of infinite list became an infinite list of finite
lists and then a finite list. And still it didn't actually resolve all those
calls until it was actually needed. In this case, when the <em>ghci</em> interpreter
tried to get a string to display on the screen.</p>

<p>Freaky or what?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reverse Words With Haskell]]></title>
    <link href="http://abizern.org/2012/04/09/reverse-words-with-haskell/"/>
    <updated>2012-04-09T15:41:00+01:00</updated>
    <id>http://abizern.org/2012/04/09/reverse-words-with-haskell</id>
    <content type="html"><![CDATA[<p>As part of my preparation for <a href="http://code.google.com/codejam">Google Code Jam</a>
I've been working through the practice problems with Haskell.</p>

<p>I make a screencast on solving the
<a href="http://code.google.com/codejam/contest/351101/dashboard#s=p1">Reverse Words</a>
problem, along with the mechanics of getting the problem inputs and submitting solutions. The style was heavily influenced by a sequence on
<a href="http://youtu.be/045422s6xik?hd=1">Data Driven Programming in Haskell</a> by
<a href="http://entirelysubjective.com/programming/data-driven-programming-haskell-1/">Jonas Tullus</a></p>

<!-- more -->


<p>I moved at a slower pace, and talking and typing seem to have confused my brain
so I think I lapsed into gibberish in a couple of places. (If you know me,
you'll know that's nothing new).</p>

<p><iframe width="640" height="510" src="http://www.youtube.com/embed/_tgv3HVgOMc  " frameborder="0" allowfullscreen></iframe></p>

<p>Here's the cleaned up source file.</p>

<p><div><script src='https://gist.github.com/2368757.js?file='></script>
<noscript><pre><code>module Main where

{-
 - http://code.google.com/codejam/contest/351101/dashboard#s=p1
 -}

{-
 - Usage either compile or use runhaskell / runghc
 - Pass the input file as the sole command line argument
 - Redirect output if you want the results to go in a file
 -}

import IO
import System.Environment
import Data.List

reverseWords :: String -&gt; String
reverseWords = unwords . reverse . words

boilerPlate :: [String]
boilerPlate = [&quot;Case #&quot; ++ show n ++ &quot;: &quot; | n &lt;- [1..]]

standardOutput :: [String] -&gt; [String]
standardOutput = zipWith (++) boilerPlate

main =  do
  (f:_) &lt;- getArgs
  file  &lt;- readFile f

  let cases     = tail $ lines file
      solutions = standardOutput $ map reverseWords cases
  putStrLn $ unlines $ solutions
</code></pre></noscript></div>
</p>

<p>I need to learn more Emacs shortcuts :(</p>
]]></content>
  </entry>
  
</feed>
