<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: General Programming | Abizer Nasir]]></title>
  <link href="http://abizern.org/categories/general-programming/atom.xml" rel="self"/>
  <link href="http://abizern.org/"/>
  <updated>2013-01-06T18:54:50+00:00</updated>
  <id>http://abizern.org/</id>
  <author>
    <name><![CDATA[Abizer Nasir]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Correcting Brace Layout]]></title>
    <link href="http://abizern.org/2012/12/30/correcting-brace-layout/"/>
    <updated>2012-12-30T11:09:00+00:00</updated>
    <id>http://abizern.org/2012/12/30/correcting-brace-layout</id>
    <content type="html"><![CDATA[<p>I wrote a <a href="http://abizern.org/fixbraces/">small rubygem</a> called <em>fixbraces</em> to
move the opening brace of a conditional to the same line as the opening
statement.</p>

<p>So now I can correct all the Xcode generated stubs that look like:</p>

<p>``` objective-c
- (void)someMethod
{</p>

<pre><code>// some code here
</code></pre>

<p>}
```</p>

<p>Into my preferred format:</p>

<p>``` objective-c
- (void)someMethod {</p>

<pre><code>// some code here
</code></pre>

<p>}
```</p>

<p>Which fits with my personal coding standards.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Commanding Your Text Editor]]></title>
    <link href="http://abizern.org/2012/11/02/commanding-your-text-editor/"/>
    <updated>2012-11-02T19:53:00+00:00</updated>
    <id>http://abizern.org/2012/11/02/commanding-your-text-editor</id>
    <content type="html"><![CDATA[<p>There's a recent post up on the PeepCode Blog about
<a href="https://peepcode.com/blog/2012/commanding-your-text-editor">Commanding Your Text Editor</a>
which has some handy tips for Emacs, Vim, Textmate, Sublime Text and the OS
X. It's a short read, and worth the time.</p>

<!-- more -->


<p>More and more of our time is spent at a keyboard typing, whether you're a
programmer or not. Those of you who know me will have heard me talking about the
Dvorak keyboard layout and my current attraction to Emacs.</p>

<p>You don't have to go that far down the rabbit hole, but it's surprising how many
Emacs bindings are supported natively on the Mac, and unlike Vim; you don't need
to be in a different mode to use them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Live Coding]]></title>
    <link href="http://abizern.org/2012/08/20/on-live-coding/"/>
    <updated>2012-08-20T12:34:00+01:00</updated>
    <id>http://abizern.org/2012/08/20/on-live-coding</id>
    <content type="html"><![CDATA[<p>I read somewhere that part of the popularity of
<a href="http://en.wikipedia.org/wiki/The_West_Wing">The West Wing</a> was that it was
entertaining to watch smart people solve difficult problems. I think that's part
of the reason why I find watching live coding videos so entertaining - It's more
fun to watch someone solve a problem than doing it yourself.</p>

<!-- more -->


<p>There are plenty of screencasts you can find - <a href="http://youtubecom">YouTube</a> is
an obvious one, but don't forget <a href="http://vimeo.com">Vimeo</a>.</p>

<p>Some good ones to watch are the
<a href="https://peepcode.com/screencasts/play-by-play">Play-By-Play</a> series produced by
<a href="http://peepcode.com">Peepcode</a> These screencasts have a developer solving a
problem set by the host as he talks to them about the choices they make and the
tools they use. Mostly Ruby / Railsy, but there are exceptions - Zed Shaw and
Python, Ryan Singer designing a UX workflow for the Web, Kyle Neath on UI
Workflow, and the latest has Tim Caswell creating a node.js web app.</p>

<p>These are not only interesting screencasts, with plenty to learn from, but I
find they are great for background noise. I work at home, and having the sounds
of a keyboard clacking and techy conversation pushes back the silence. Also,
when you look at a tutorial type blog post - or something on GitHub, all you see
is the finished product. But when you watch someone working, you realise that it
doesn't come out fully formed like that, it sort of evolves. The same way that
you evolve code.</p>

<p>I did my own small one about
<a href="http://abizern.org/2012/04/09/reverse-words-with-haskell/">reversing words in Haskell</a>
a few months ago and I found that it's harder to do than it looks. I credited
<a href="http://codinguncut.com/">Jonas Tullus</a> as an influence for that screencast and now
see that he has started <a href="http://codinguncut.com">Coding Uncut</a>, where he takes
on a problem and screencasts his solution in Haskell. This is harder to do than
the Peepcode ones, because without anyone asking you questions you become more
self-conscious about vocalising your thoughts.</p>

<p>Some of the things I've picked up from watching these are:</p>

<ul>
<li>It's okay to spend your time looking up the documentation. Knowing roughly
what approach to take to a solution and then looking up the details is more
important.</li>
<li>It's faster to try something and see what happens rather than overthinking
everything from the beginning.</li>
<li>Version control is not an optional extra (okay, I already believe this, but
it's nice to see that I'm not the only one).</li>
<li>It's not the tool that matters - Emacs, Vim, JEdit, Paper and Sharpie - but
how you use it.</li>
<li>"It's not about the code. It's your understanding of the problem that you're
working on." - Zed Shaw</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[London CoderDojo]]></title>
    <link href="http://abizern.org/2012/04/15/london-coderdojo/"/>
    <updated>2012-04-15T18:30:00+01:00</updated>
    <id>http://abizern.org/2012/04/15/london-coderdojo</id>
    <content type="html"><![CDATA[<p>I mentored at <a href="http://zen.coderdojo.com/dojo/74">CoderDojo London</a> this
weekend. These are just some of my thoughts about it.</p>

<!-- more -->


<p><blockquote><p>CoderDojo is a movement orientated around running free not-for-profit coding clubs and regular sessions for young people.</p><footer><strong>Coder Dojo site</strong> <cite><a href='http://coderdojo.com/about-us/'>coderdojo.com/about-us/&hellip;</a></cite></footer></blockquote></p>

<p>A regular London chapter has formed, supported by and at the offices of
<a href="http://forwardtechnology.co.uk">Forward Technology</a>.  It takes place in their
canteen/theatre which has a nice tiered seating area and a miked up
presentation stand.</p>

<p>It's still the Easter break, but 6 kids turned up with laptops ready to carry on
with projects they had already started and learn new stuff.  It started with a
presentation of what the day's agenda was, which I mostly zoned out of as I was
busy churning through the Javascript tutorial on
<a href="http://codecademy.co.uk">Codecademy</a> which was going to covered. I'm not a web
developer so I didn't want to show myself up.</p>

<p>After the opening talk the kids started burning through the tutorials at a
breakneck pace.  Where I went through them a bit slower; they hammered through
the interactive tutorial without (seemingly) worrying about learning what they
were doing. But that wasn't the case.  Each succeeding question depended on
knowledge gained in the previous one, and they obviously had retained it. The
mentors watched them going through the exercises and answered questions.  I may
not know Javascript, but I can spot syntax errors and misspelled commands like a
BOSS.  So I wasn't useless as I was worried I would be.</p>

<p>After that section (and after a few breaks - these are kids after all) Adam got
everyone to open
<a href="http://elucidatedbinary.com/recanvas">elucidatedbinary.com/recanvas</a> where you
can draw straight into web page and see the results right as you code. And then
step by step got them to follow along first creating a line, then a rectangle
then filling in the rectangle then drawing circles, arcs and trying to draw the
first initial of your name.</p>

<p>This was the most fun of the afternoon. Seeing the results instantaneously
really drove them along. They changed the points to see what would happen
without worrying about what they were doing. The mentors were kept busy helping
them with the syntax, explaing the difference between starting a line and
drawing a line, the coordinate system, points, colours, line thickness. These
were youngsters who don't know their way about a keyboard as most of the rest of
us do, but I didn't want to correct them because it would break the flow of what
they were doing. I had to draw the letter shapes on paper a couple of times and
walk them through the process of working out what the coordinates of each point
should be.</p>

<p>I showed one girl how to draw an arc on the canvas, went away and when I came
back she proudly showed me that she'd put two filled circles above the
arc to make a smiley face. Without being told to or shown how.</p>

<p><span class='pullquote-right' data-pullquote='Helping kids program is hard. You can&#8217;t tell them to RTFM'>
One of the extra tasks was to modify a function to draw on the canvas when the
mouse was pressed. I saw one boy go to Stack Overflow, find a similar solution,
and then, rather than just copy-pasting the code, he turned to me and asked me
to explain <code>mousedown</code> to him. (A lesson that many people could stand to learn).
I tweeted about it later:
Helping kids program is hard. You can't tell them to RTFM.
Since I would have to refer to the said FM to answer him properly,
I deferred the question to someone who knew what he was talking about.
</span></p>

<p>It was an energising experience. The program is in the early days yet, there
isn't a program of tasks to cover. But the enthusiasm of the children and the
mentors is the driving force at the moment.</p>

<p>If you have or know of someone who would be interested in this. Either as a
mentor or a student, please, let them know about it. The sessions are free to
attend, take place in Camden Town on Saturdays between 12-3. You can sign up
with EventBrite, which gives an idea of how many attendees there will be and how
many mentors are available.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting the address of a shortened URL]]></title>
    <link href="http://abizern.org/2010/10/16/getting-the-address-of-a-shortened-url/"/>
    <updated>2010-10-16T22:05:52+01:00</updated>
    <id>http://abizern.org/2010/10/16/getting-the-address-of-a-shortened-url</id>
    <content type="html"><![CDATA[<p>Many times you will see a shortened url but you aren't sure what it points
at. Here's a little tip that I picked up from
<a href="http://tommorris.org">Tom Morris</a>.</p>

<p>Pop open your terminal, or console, or whatever your command-line application is
and type the following:</p>

<p><code>bash
curl --head shorturl
</code></p>

<p>This pops up a short amount of useful information about the target url. For
example the response for the Google short URL for this site shows this;</p>

<p><code>bash
~ % curl --head http://goo.gl/oQx8
HTTP/1.1 301 Moved Permanently
Content-Type: text/html; charset=UTF-8
Expires: Sat, 16 Oct 2010 21:01:51 GMT
Date: Sat, 16 Oct 2010 21:01:51 GMT
Cache-Control: private, max-age=86400
Location: http://abizern.org/
X-Content-Type-Options: nosniff
X-Frame-Options: SAMEORIGIN
X-XSS-Protection: 1; mode=block
Server: GSE
Transfer-Encoding: chunked
</code></p>

<p>And you can see that the Location shows that you aren't going to get
Rick-rolled.</p>
]]></content>
  </entry>
  
</feed>
